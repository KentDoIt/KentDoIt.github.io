<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo 檔案名稱 Url 優化（三）</title>
    <url>/hexo/821499080/</url>
    <content><![CDATA[<div class="note default">
            <p>建議此篇內容越早更改設定越好！<br>不然文章一多起來也懶得調整前面的文章 QQ</p>
          </div>

<h2 id="範例的環境版本"><a href="#範例的環境版本" class="headerlink" title="範例的環境版本"></a>範例的環境版本</h2><p>hexo 版本：6.0.1<br>hexo-cli 版本：4.3.0<br>next 版本：7.8.0</p>
<h2 id="修改文章名稱參數"><a href="#修改文章名稱參數" class="headerlink" title="修改文章名稱參數"></a>修改文章名稱參數</h2><blockquote>
<p>預設名稱會帶入 title 參數，如果文章多起來檔名只有 title 的話，要對文章做一些管理或分類都很難下手，因此因要修改檔名參數來解決這個問題，下方示範在檔名參數添加日期。</p>
</blockquote>
<p><img src="https://imgur.com/MzSJZrG.jpg" alt="結果圖"></p>
<p>Step1：進入根目錄 _config.yml 搜尋 <code>#Writing</code></p>
<p>Step2：修改參數 <code>new_post_name</code></p>
<p><a href="https://hexo.io/zh-tw/docs/writing#%E6%AA%94%E6%A1%88%E5%90%8D%E7%A8%B1">官方文件</a>提供的參數</p>
<ul>
<li><code>:title</code>：標題</li>
<li><code>:year</code>：建立年份（4 位數）</li>
<li><code>:month</code>：建立月份（2 位數）</li>
<li><code>:i_month</code>：建立月份（去掉開頭的零）</li>
<li><code>:day</code>：建立日期（2 位數）</li>
<li><code>:i_day</code>：建立日期（去掉開頭的零）</li>
</ul>
<figure class="highlight diff"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"># Writing</span><br><span class="line"><span class="deletion">- new_post_name: :title.md # File name of new posts</span></span><br><span class="line"><span class="addition">+ new_post_name: :year-:month-:day-:title.md</span></span><br></pre></td></tr></table></figure>

<h2 id="Url-優化"><a href="#Url-優化" class="headerlink" title="Url 優化"></a>Url 優化</h2><blockquote>
<p>預設路徑格式為 年&#x2F;月&#x2F;日&#x2F;名稱，如果是英文的話倒還好中文其實會很醜，且有空格的話會有用 <code>破折號 -</code> 替代，因此下方會介紹如何優化這個醜醜的 url。</p>
</blockquote>
<p><img src="https://imgur.com/A4msRQp.jpg" alt="比較圖"></p>
<p>Step1：安裝 abbrlink 套件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>

<p>Step2：進入根目錄 _config.yml 搜尋 <code>#URL</code><br>Step3：修改參數 <code>permalink</code></p>
<div class="note default">
            <p>之後只要 hexo s 就會自動幫我們在文章 front-matter 中添加 <code>abbrlink</code> 參數並帶上一串英文作為值，這串英文就可以做為 permalink 參數，詳細參數設置可以參考<a href="https://hexo.io/zh-tw/docs/permalinks">官方文件</a>。</p>
          </div>

<figure class="highlight diff"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"># Writing</span><br><span class="line"># URL</span><br><span class="line">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="line">url: https://kentdoit.github.io/</span><br><span class="line"><span class="deletion">- permalink: :year/:month/:day/:title/</span></span><br><span class="line"><span class="addition">+ permalink: :category/:year:month:day/:abbrlink/</span></span><br></pre></td></tr></table></figure>

<p>Step4：檔案底部添加新參數</p>
<figure class="highlight yml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># abbrlink config</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>  <span class="comment"># 演算法：crc16(default) and crc32 </span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">dec</span>    <span class="comment"># 進位制：dec(default) and hex</span></span><br></pre></td></tr></table></figure>

<p>Step5：優化 Category &amp; Tag</p>
<ul>
<li>可以在 _config.yml 中對 Category、Tag 設置對應轉換的字串。</li>
<li>分別在 category_map、tag_map 參數中設置轉換字串。（請參考下方範例）<div class="note default">
            <p>這樣在 url 中使用 category 就可轉換為自己想要的字串。（例如：Hexo ➞ hexo）</p>
          </div></li>
</ul>
<figure class="highlight yml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line">  <span class="attr">Hexo:</span> <span class="string">hexo</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line">  <span class="string">Hexo</span> <span class="string">部落格:</span> <span class="string">hexo</span> <span class="string">blog</span></span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>有了這招就算 permalink 中的 title 參數有中文也可以透過轉換變為英文，另外在記錄一個可以將中文轉英文的方法。（p.s. 我自己沒有嘗試過所以不確定可不可行）</p>
          </div>

<figure class="highlight diff"><figcaption><span>_config.yml</span><a href="https://blog.51cto.com/u_14032861/2952031">src</a></figcaption><table><tr><td class="code"><pre><span class="line"># Directory</span><br><span class="line"><span class="deletion">- source_dir: source</span></span><br><span class="line"><span class="addition">+ source_dir: source-en</span></span><br><span class="line"><span class="deletion">- public_dir: public</span></span><br><span class="line"><span class="addition">+ public_dir: public-en</span></span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>到這邊部署後有可能會出現 404 畫面，我這邊的問題是因為 <code>路徑大小</code> 寫造成的。</p>
          </div>

<p><img src="https://imgur.com/NtTxON5.jpg" alt="路徑比較圖"></p>
<p>原因：git 命令默認會忽略文件名稱的大小寫，因此大小寫發生變化會被忽略也導致沒有更新。<br>解法：修改 git ignorecase 參數。</p>
<p>Step1：進到根目錄 deploy_git 資料夾</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd .deploy_git</span><br></pre></td></tr></table></figure>

<p>Step2：編輯 git 設定檔</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim .git/config</span><br></pre></td></tr></table></figure>

<p>Step3：修改 ignorecase 參數為 false（要先按小寫 i 才能修改）</p>
<figure class="highlight diff"><figcaption><span>.git/config</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="addition">+ ignorecase = false</span></span><br><span class="line"><span class="deletion">- ignorecase = true</span></span><br></pre></td></tr></table></figure>

<p>Step4：修改完後儲存並離開檔案，先按 Esc 後直接輸入以下指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure>

<p>Step5：接下來的三個指令是為了更新 server 上的檔案（先刪除在新增）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git rm -rf *</span><br><span class="line">git commit -m &#x27;clean all file&#x27;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<p>Step6：接下來指令是回到根目錄並清除快取檔案 (db.json) 和已產生的靜態檔案 (public)，最後就是重新部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ..</span><br><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://trifond.github.io/2018/12/05/hexo-folder-ignore-case/">Hexo部署到Github后文件夹名大小写引起的问题</a><br><a href="https://israynotarray.com/hexo/20190517/2562079032/">Hexo Url優化(SEO)</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo 優化</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 主題 NexT 設置 (一)</title>
    <url>/hexo/3802192554/</url>
    <content><![CDATA[<h2 id="範例的環境版本"><a href="#範例的環境版本" class="headerlink" title="範例的環境版本"></a>範例的環境版本</h2><p>hexo 版本：6.0.1<br>hexo-cli 版本：4.3.0<br>next 版本：7.8.0</p>
<h2 id="更換主題-theme"><a href="#更換主題-theme" class="headerlink" title="更換主題 theme"></a>更換主題 theme</h2><p>Step1：從<a href="https://hexo.io/themes/">官方</a>主題找尋自己順眼的</p>
<div class="note default">
            <p>最近主流有兩個推薦的（我選擇 Next）</p>
          </div>

<ul>
<li><a href="https://github.com/theme-next/hexo-theme-next">Next</a></li>
<li><a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a></li>
</ul>
<p>Step2：下載主題 Download 或 clone 到 themes 資料夾底下</p>
<div class="note danger">
            <p>切記要先進入該專案根目錄的 themes 資料夾底下</p>
          </div>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd themes</span><br><span class="line">git clone https://github.com/theme-next/hexo-theme-next.git</span><br></pre></td></tr></table></figure>

<p>Step3：修改根目錄 _config.yml 中的 theme 參數（預設是 landscape）</p>
<figure class="highlight diff"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="addition">+theme: landscape</span></span><br><span class="line"><span class="deletion">-theme: hexo-theme-next</span></span><br></pre></td></tr></table></figure>

<h2 id="NexT-樣式設定"><a href="#NexT-樣式設定" class="headerlink" title="NexT 樣式設定"></a>NexT 樣式設定</h2><blockquote>
<p>下方會介紹部落格樣式中最基礎的設置。</p>
</blockquote>
<h3 id="Scheme-Settings"><a href="#Scheme-Settings" class="headerlink" title="Scheme Settings"></a>Scheme Settings</h3><blockquote>
<p>第一個介紹的一定非 Scheme 莫屬，替部落格換上喜歡的皮。</p>
</blockquote>
<p>Step1：搜尋 Scheme</p>
<p>Step2：將選擇的 scheme 取消註解（我選擇 Mist）</p>
<figure class="highlight diff"><figcaption><span>themes/hexo-theme-next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line"># scheme: Muse</span><br><span class="line">scheme: Mist</span><br><span class="line"># scheme: Pisces</span><br><span class="line"># scheme: Gemini</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>下方演示 NexT 提供的四種 schemes</p>
          </div>

<p><img src="https://imgur.com/tq9H5Eb.png" alt="NexT 提供的四種 schemes"></p>
<h3 id="程式碼區塊樣式"><a href="#程式碼區塊樣式" class="headerlink" title="程式碼區塊樣式"></a>程式碼區塊樣式</h3><blockquote>
<p>撰寫技術文章絕對不能缺少的 code block，換上舒服的樣式好比設置編輯器的樣式一樣。</p>
</blockquote>
<p>Step1：搜尋 codeblock</p>
<p>Step2：設置參數</p>
<ul>
<li>highlight_theme：代碼高亮（我選擇 galactic，後來因為要客製化所以選擇 normal）<ul>
<li>由於不同的 Next 版本可能有的 highlight_theme 樣式不同，因此建議大家都可以都試試看在選擇比較喜歡的。</li>
</ul>
</li>
<li>copy_button：hover 會顯示複製按鈕</li>
<li>style：外觀樣式（我選擇原本是選 mac，後來發現 flat 比較適合客製化其它樣式）</li>
</ul>
<figure class="highlight diff"><figcaption><span>themes/hexo-theme-next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  # Code Highlight theme</span><br><span class="line">  # Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span><br><span class="line">  # See: https://github.com/chriskempson/tomorrow-theme</span><br><span class="line"><span class="deletion">-  highlight_theme: normal</span></span><br><span class="line"><span class="addition">+  highlight_theme: galactic</span></span><br><span class="line">  # Add copy button on codeblock</span><br><span class="line">  copy_button:</span><br><span class="line"><span class="deletion">-    enable: false</span></span><br><span class="line"><span class="addition">+    enable: true</span></span><br><span class="line">    # Show text copy result.</span><br><span class="line"><span class="deletion">-    show_result: false</span></span><br><span class="line"><span class="addition">+    show_result: false</span></span><br><span class="line">    # Available values: default | flat | mac</span><br><span class="line"><span class="deletion">-    style:</span></span><br><span class="line"><span class="addition">+    style: flat</span></span><br></pre></td></tr></table></figure>

<div class="note danger">
            <p>如果上面設置完沒有效果，請確認根目錄 _config.yml 檔案中的 <code>highlight</code> 參數 enable 是否設置為 true。</p>
          </div>

<figure class="highlight diff"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">highlight:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>

<h3 id="Menu-設置"><a href="#Menu-設置" class="headerlink" title="Menu 設置"></a>Menu 設置</h3><blockquote>
<p>設置 menu 選單列的內容（home、about、tags、categories、archives、schedule、sitemap、commonweal），預設只有開啟兩個（home、archives）。</p>
</blockquote>
<p>Step1：搜尋 Menu Settings</p>
<p>Step2：設置參數</p>
<ul>
<li>需要啟用就將對應的註解移除，下方範例示範開啟 tags、categories</li>
</ul>
<figure class="highlight diff"><figcaption><span>themes/hexo-theme-next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  #about: /about/ || fa fa-user</span><br><span class="line"><span class="deletion">- #tags: /tags/ || fa fa-tags</span></span><br><span class="line"><span class="addition">+ tags: /tags/ || fa fa-tags</span></span><br><span class="line"><span class="deletion">- #categories: /categories/ || fa fa-th</span></span><br><span class="line"><span class="addition">+ categories: /categories/ || fa fa-th</span></span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  #schedule: /schedule/ || fa fa-calendar</span><br><span class="line">  #sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="line">  #commonweal: /404/ || fa fa-heartbeat</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>Hexo 原生是使用 Font Awesome icon（註解中有寫），並透過 <code>短路求值（Short-circuit evaluation）</code> 的方式在路徑後方加上 icon 樣式（可以修改其它 icon 樣式）。</p>
          </div>

<p>Step3：menu 可以設置是否要開啟 icon 圖示 以及 badges 數量（用來顯示對應的數量）。</p>
<figure class="highlight diff"><figcaption><span>themes/hexo-theme-next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"># Enable / Disable menu icons / item badges.</span><br><span class="line">menu_settings:</span><br><span class="line">  icons: true</span><br><span class="line"><span class="deletion">-  badges: false</span></span><br><span class="line"><span class="addition">+  badges: true</span></span><br></pre></td></tr></table></figure>

<p><img src="https://imgur.com/AbQvbMt.png" alt="menu tag"></p>
<div class="note danger">
            <p>點選 menu 中預設（home、archives）之外的路徑，會出現路徑錯誤（例如：Cannot GET&#x2F;about&#x2F;），因為我們還沒新增對應的頁面，從根目錄 source 資料夾中是否有對應的資料夾，新增頁面作法可以參考下一篇文章。</p>
          </div>

<p><img src="https://imgur.com/W1W5iaB.png" alt="路徑錯誤"></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo 部落格</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 新增文章和頁面 (二)</title>
    <url>/hexo/356195859/</url>
    <content><![CDATA[<h2 id="範例的環境版本"><a href="#範例的環境版本" class="headerlink" title="範例的環境版本"></a>範例的環境版本</h2><p>hexo 版本：6.0.1<br>hexo-cli 版本：4.3.0<br>next 版本：7.8.0</p>
<h2 id="新增指令"><a href="#新增指令" class="headerlink" title="新增指令"></a>新增指令</h2><blockquote>
<p>新增文章、草稿、草稿三種語法都一樣是使用 new 指令，只差別在 layout 參數。</p>
</blockquote>
<p>指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>參數</p>
<p>title：文章標題</p>
<ul>
<li>若文章標題包含空格，需使用 <code>引號</code> 刮起來（雙引號、單引號都可以），否則會以最後一個空格後面的字作為 title。</li>
</ul>
<p>layout：模板種類，有以下三種不同的種類</p>
<ul>
<li>draft.md（新增草稿）</li>
<li>page.md（新增頁面）</li>
<li>post.md（預設值，新增文章）</li>
</ul>
<div class="note default">
            <p>如果沒有加上 layout 參數，則會帶入根目錄 _config.yml 檔案中的 <code>default_layout</code> 參數，預設為 post。</p>
          </div>

<blockquote>
<p>再下新增指令前，還需要先暸解一些設定以及檔案路徑。</p>
</blockquote>
<h3 id="存放路徑"><a href="#存放路徑" class="headerlink" title="存放路徑"></a>存放路徑</h3><blockquote>
<p>新增的文章會存放於根目錄 source&#x2F;_post 路徑底下，會用 .md 檔作為筆記的副檔名。</p>
</blockquote>
<p><img src="https://imgur.com/XWXBS2c.png"></p>
<div class="note default">
            <p>如果想獲取已發佈的文章，則可以直接複製 source&#x2F;_post 資料夾，就可以獲得發佈過的 md 檔案。</p>
          </div>

<h3 id="設置模版參數"><a href="#設置模版參數" class="headerlink" title="設置模版參數"></a>設置模版參數</h3><blockquote>
<p>根目錄 scaffolds 資料夾中的 layout 檔案（draft.md、page.md、post.md），分別代表三種種 layout 模板的設置。</p>
</blockquote>
<p><img src="https://imgur.com/8Cyd1Pz.png"></p>
<h3 id="模版參數種類"><a href="#模版參數種類" class="headerlink" title="模版參數種類"></a>模版參數種類</h3><blockquote>
<p>參數是 <code>Front-matter</code>，檔案最上方以 <code>---</code> 分隔的區域）作為模版預設樣式的參數。</p>
</blockquote>
<p>常用的四種參數</p>
<ul>
<li>title：會自動帶上當 title 值，並以 h1 tag 的方式呈現。</li>
<li>date：會自動帶上當下日期。</li>
<li>categories：分類（多筆會用 <code>破折號 -</code> 的方式輸入）。</li>
<li>tags：分類（多筆會用 <code>破折號 -</code> 的方式輸入）。</li>
</ul>
<figure class="highlight js"><figcaption><span>示範 scaffolds 中如何用 &#123;&#123;&#125;&#125; 設置 Front-matter 參數</span></figcaption><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="attr">title</span>: &#123;&#123; title &#125;&#125; <span class="comment">// 預設值，文章名稱（會自動帶入）</span></span><br><span class="line"><span class="attr">date</span>: &#123;&#123; date &#125;&#125; <span class="comment">// 預設值，文章時間（會自動帶入）</span></span><br><span class="line"><span class="attr">tags</span>: &#123;&#123; tags &#125;&#125; <span class="comment">// 標籤</span></span><br><span class="line"><span class="attr">categories</span>: &#123;&#123; categories &#125;&#125; <span class="comment">// 分類</span></span><br><span class="line"><span class="attr">thumbnail</span>: <span class="comment">// 預覽圖</span></span><br><span class="line"><span class="attr">banner</span>: <span class="comment">// 文章開頭圖</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>其他參數請參考<a href="https://hexo.io/zh-tw/docs/front-matter">官方文件</a></p>
          </div>

<h2 id="新增頁面"><a href="#新增頁面" class="headerlink" title="新增頁面"></a>新增頁面</h2><blockquote>
<p>此小節也會介紹如何解決上一篇文章結尾提到的徑錯誤（例如：Cannot GET&#x2F;about&#x2F;）。</p>
</blockquote>
<p>語法</p>
<ul>
<li><code>hexo new page &lt;title&gt;</code></li>
</ul>
<div class="note default">
            <p>下方會演釋如何透過指令建立 menu 所需頁面，以及建立後需要設置什麼？</p>
          </div>

<p>Step1：輸入新增頁面指令</p>
<ul>
<li>示範新增 tags 頁面</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>

<p><img src="https://imgur.com/6OCF161.png" alt="tags 畫面"></p>
<div class="note default">
            <p>這樣路徑就不會錯誤拉，只是會發現空空如也，那是因為還需要設置對應的 type 參數。</p>
          </div>

<p>Step2：修改 index.md 中 Front-matter 參數 type</p>
<div class="note default">
            <p>進入根目錄 source 資料夾中，剛剛新增的 tags 資料夾底下，會有一個 index.md，這隻檔案使用 Front-matter（檔案最上方以 — 分隔的區域） 作為模版預設樣式的參數。</p>
          </div>

<ul>
<li>title：會自動帶入指令中的 title（tags）</li>
<li>date：會自動帶入檔案檔案建立日期</li>
<li>type: 才會對應類別的文章</li>
</ul>
<figure class="highlight plaintext"><figcaption><span>source/tags/index.md</span></figcaption><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2022-04-25 13:15:09</span><br><span class="line">type: tags</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p><img src="https://imgur.com/bRVlExe.png" alt="tags 畫面"></p>
<p>延伸閱讀：ray 大 <a href="https://israynotarray.com/hexo/20200923/2032860736/">試著學 Hexo - 新增頁面</a></p>
<div class="note default">
            <p>文章中有提到如何去除模板，不使用預設產生的樣板而是改用手刻的 .html 檔案。</p>
          </div>

<h2 id="新增文章"><a href="#新增文章" class="headerlink" title="新增文章"></a>新增文章</h2><p>語法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new &lt;title&gt;</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>下方如何透過指令新增文章，以及建立後需要設置什麼？</p>
          </div>

<p>Step1：新增文章</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>Step2：清除快取檔案 (db.json) 和已產生的靜態檔案 (public)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo cl</span><br></pre></td></tr></table></figure>

<p>Step3：產生靜態檔案以及重新部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>示範新增文章需要做的三個指令</p>
          </div>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new &#x27;架設部落格 Hexo 部署 Github (零)&#x27;</span><br><span class="line">hexo cl</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>那如何在文章中添加圖片以及刪除文章呢？</p>
          </div>

<h3 id="刪除文章"><a href="#刪除文章" class="headerlink" title="刪除文章"></a>刪除文章</h3><p>Step1：直接刪除路徑 .&#x2F;source&#x2F;_posts 對應的文章 .md 檔案。</p>
<p>Step2：清除快取檔案和已產生的靜態檔案。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo cl</span><br></pre></td></tr></table></figure>

<p>Step3：重新部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>

<h3 id="文章圖片"><a href="#文章圖片" class="headerlink" title="文章圖片"></a>文章圖片</h3><blockquote>
<p>Hexo 本身並沒有提供上傳圖片的功能，因此需要另外尋找上傳圖片的服務，下面介紹兩種方法。</p>
</blockquote>
<p>方法一：在創建文章時會 <code>自動產生</code> 一個和文章同名的資料夾，用於存放圖片。</p>
<blockquote>
<p>透過部署時一併上傳到 github。</p>
</blockquote>
<p>Step1：搜尋 Writing<br>Step2：修改 post_asset_folder 參數（預設是 false）</p>
<figure class="highlight diff"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="deletion">- post_asset_folder: false</span></span><br><span class="line"><span class="addition">+ post_asset_folder: true</span></span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>後期不建議使用這種方式，因為 github repository 限制 5GB，當文件大小超過 50 MB 將收到警告，無法上傳超過 100 MB 的文件。</p><p>src：<a href="https://www.modb.pro/db/154051">GitHub、Gitlab、Gitee的容量及文件大小限制</a></p>
          </div>

<p>方法二：上傳其它圖片空間在用圖片超連結的方式插入到文章的 md 檔案。</p>
<blockquote>
<p>免費圖片空間：<a href="https://imgur.com/">Imgur</a>、<a href="https://upload.cc/">Upload.cc</a>、firebase</p>
</blockquote>
<p>Step1：上傳圖片到免費空間中<br>Step2：複製圖片連結<br>Step3：插入到文章中</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">type</span>](<span class="link">https://imgur.com/bRVlExe.png</span>)</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>免費圖片空間注意事項</p><ol><li>是否有時間限制（例如：超過 60 天沒有瀏覽就刪除）</li><li>圖片是否可外連（例如：有些空間是不支援直接獲取圖片連結）</li><li>圖片流量限制（例如：限制圖片的讀取數量以及流出數量）</li></ol>
          </div>

<h2 id="新增草稿"><a href="#新增草稿" class="headerlink" title="新增草稿"></a>新增草稿</h2><div class="note default">
            <p>草稿優勢為，預設不會被編譯出來，下方會介紹兩種不會被編譯的方法。</p>
          </div>

<p>指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new draft &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>方法一：_drafts 資料夾（草稿資料夾）內的文章</p>
<div class="note default">
            <p>新增的草稿會存放於 _drafts 資料夾中，若資料夾不存在則會自動生成一個。</p>
          </div>

<p>Step1：輸入新增草稿文章指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new draft &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>方法二：新增底線開頭資料夾</p>
<p>Step1：根目錄 source&#x2F;_post 資料夾內，新增底線開頭的資料夾（例如：_草稿、_draft）<br>Step2：將還沒有要發布的文章手動搬移到到該資料夾底下</p>
<p><img src="https://imgur.com/7XKWLNt.png" alt="草稿資料夾"></p>
<div class="note default">
            <p>那如果寫完了怎麼轉成文章？</p>
          </div>

<h3 id="草稿轉文章"><a href="#草稿轉文章" class="headerlink" title="草稿轉文章"></a>草稿轉文章</h3><div class="note default">
            <p>下面介紹兩種方法。</p>
          </div>

<p>方法一：手動搬移</p>
<ul>
<li>將草稿文章手動搬移到 source&#x2F;_post 資料夾中。</li>
</ul>
<p>方法二：輸入 publish 指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo publish draft &lt;title&gt;</span><br></pre></td></tr></table></figure>

<div class="note danger">
            <p>有限制，僅適用於存在 _drafts 資料夾底下的草稿，因為會自動從 source&#x2F;_drafts 尋找對應的草稿文章，因此不在該資料夾底下則會搜尋不到。</p>
          </div>

<p><img src="https://imgur.com/vmJTEpM.png" alt="草稿 error"></p>
<h3 id="編譯草稿"><a href="#編譯草稿" class="headerlink" title="編譯草稿"></a>編譯草稿</h3><blockquote>
<p>上面有提到，預設是不會將編譯草稿編譯出來，但如果要讓本地端 server 看見還是有辦法可以將其編譯出來的，下方介紹兩種方法。</p>
</blockquote>
<p>方法一：reu server 時帶入 <code>--draft</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s --draft</span><br></pre></td></tr></table></figure>

<p>方法二：修改根目錄 _config.yml 中的 <code>render_drafts</code> 參數（預設為 false）</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-render_drafts: false</span></span><br><span class="line"><span class="addition">+render_drafts: true</span></span><br></pre></td></tr></table></figure>

<div class="note danger">
            <p>但要注意使用方法二，運行時會出現警告提醒。（可以忽略沒關係）</p>
          </div>

<p><img src="https://imgur.com/wuOgMjr.png" alt="WARN 警告提示"></p>
<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://israynotarray.com/hexo/20200923/2032860736/">試著學 Hexo - 新增頁面</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo 部落格</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 管理爬蟲 robots.txt（五）</title>
    <url>/hexo/3578178281/</url>
    <content><![CDATA[<h2 id="範例的環境版本"><a href="#範例的環境版本" class="headerlink" title="範例的環境版本"></a>範例的環境版本</h2><p>hexo 版本：6.0.1<br>hexo-cli 版本：4.3.0<br>next 版本：7.8.0</p>
<h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><blockquote>
<p>如果有特定的頁面不希望被加入 sitemap.xml 中，可以在頁面的 markdown 中 Front-matter 設定 sitemap: false。</p>
</blockquote>
<figure class="highlight diff"><figcaption><span>text.md</span></figcaption><table><tr><td class="code"><pre><span class="line">title: 測試</span><br><span class="line">date: 2022-05-01 14:10:25</span><br><span class="line">categories:</span><br><span class="line">tags: </span><br><span class="line">description:</span><br><span class="line"><span class="addition">+ sitemap: false</span></span><br></pre></td></tr></table></figure>

<h2 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h2><blockquote>
<p>設置搜尋引擎爬蟲哪些是可以爬的路徑哪些是不能爬的，也能增強 SEO。</p>
</blockquote>
<p>Step1：根目錄 source 資料夾底下新增 robots.txt 檔案</p>
<p><img src="https://imgur.com/z1hRLbs.jpg"></p>
<p>Step2：設置檔案參數</p>
<p>User-agent : 爬蟲程式名字，必要項目</p>
<ul>
<li>可以在每項規則中指定一或多個 user-agen</li>
<li>*：運行於所有搜尋引擎，也可以只允許指定搜尋引擎，例如<code>User-agent: Googlebot</code>。</li>
</ul>
<p>Allow：允許爬取路徑，至少要有一個</p>
<ul>
<li>相對路徑；若為目錄，則必須以 &#x2F; 作為結尾。</li>
</ul>
<p>Disallow：不允許爬取路徑，至少要有一個</p>
<ul>
<li>相對路徑；若為目錄，則必須以 &#x2F; 作為結尾。</li>
</ul>
<p>Sitemap：網站地圖的路徑，非必要</p>
<ul>
<li>使用絕對路徑。</li>
</ul>
<p>Crawl-delay：同伺服器每次連續請求所需的要間隔秒數，非必要</p>
<figure class="highlight txt"><figcaption><span>source/robots.txt</span></figcaption><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /archives/</span><br><span class="line">Allow: /categories/</span><br><span class="line">Allow: /tags/ </span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /fancybox/</span><br><span class="line">Sitemap: https://kentdoit.github.io/sitemap.xml</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p><a href="https://israynotarray.com/other/20210627/3588736352/">ray 大</a>：『建議不要忽略 js、css 與 fonts 相關的檔案與資料夾，否則可能在 Google Console Search 會收到一些問題提示』。</p>
          </div>

<p>延伸閱讀：<a href="https://israynotarray.com/other/20210627/3588736352/">快速掌握 robots.txt 用途</a></p>
<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://blog.yucheng.me/post/hexo-configuration/#sitemap-xml-%E6%90%9C%E5%B0%8B%E5%BC%95%E6%93%8E%E7%88%AC%E8%9F%B2">Hexo 基本配置</a><br><a href="https://israynotarray.com/other/20210627/3588736352/">快速掌握 robots.txt 用途</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo 優化</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 設置 GA、Sitemap（四）</title>
    <url>/hexo/599670072/</url>
    <content><![CDATA[<div class="note default">
            <p>會把這篇內容放在前面是因為我深受其害，因此我誠心建議這些設定越早弄完越好。</p>
          </div>

<h2 id="範例的環境版本"><a href="#範例的環境版本" class="headerlink" title="範例的環境版本"></a>範例的環境版本</h2><p>hexo 版本：6.0.1<br>hexo-cli 版本：4.3.0<br>next 版本：7.8.0</p>
<h2 id="Google-Analytics"><a href="#Google-Analytics" class="headerlink" title="Google Analytics"></a>Google Analytics</h2><blockquote>
<p>下面分成兩個方向來設置：設置追蹤碼、埋追蹤碼。</p>
</blockquote>
<div class="note default">
            <p>想看詳細過程介紹可以參考：Gui <a href="https://guiblogs.com/hexo30-12/">Day 12：為 Hexo 裝設 Google Analytics，追蹤你的部落格流量（使用 Next 佈景主題）</a></p>
          </div>

<h3 id="設置追蹤碼（製評估-ID）"><a href="#設置追蹤碼（製評估-ID）" class="headerlink" title="設置追蹤碼（製評估 ID）"></a>設置追蹤碼（製評估 ID）</h3><p>Step1：<a href="https://analytics.google.com/analytics/web/provision/#/provision">Google Analytics</a> 申請帳號<br>Step2：複製評估 ID（<code>G-</code> 開頭）<br>Step3：修改 NexT 主題中 _config.yml 參數</p>
<figure class="highlight diff"><figcaption><span>themes/hexo-theme-next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"># Google Analytics</span><br><span class="line">google_analytics:</span><br><span class="line"><span class="deletion">-  tracking_id: # &lt;app_id&gt;</span></span><br><span class="line"><span class="addition">+  tracking_id: #貼上剛剛複製的評估 ID</span></span><br><span class="line">  # By default, NexT will load an external gtag.js script on your site.</span><br><span class="line">  # If you only need the pageview feature, set the following option to true to get a better performance.</span><br><span class="line">  only_pageview: false</span><br></pre></td></tr></table></figure>

<h3 id="埋追蹤碼"><a href="#埋追蹤碼" class="headerlink" title="埋追蹤碼"></a>埋追蹤碼</h3><p>Step1：複製追蹤碼</p>
<p><img src="https://imgur.com/mjvgxfs.jpg" alt="步驟演示：資料串流 →  全域網站代碼 → 複製"></p>
<p>Step2：檔案 themes&#x2F;hexo-theme-next&#x2F;layout&#x2F;_partials&#x2F;head&#x2F;head.swig 最後貼上追蹤碼</p>
<figure class="highlight diff"><figcaption><span>themes/hexo-theme-next/layout/_partials/head/head.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;&#123; next_config() &#125;&#125;</span><br><span class="line"><span class="addition">+ &lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span></span><br><span class="line"><span class="addition">+ &lt;script async src=&quot;https://www.googletagmanager.com/gtag/js?id=G-K8QW91NNBQ&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="addition">+ &lt;script&gt;</span></span><br><span class="line"><span class="addition">+   window.dataLayer = window.dataLayer || [];</span></span><br><span class="line"><span class="addition">+   function gtag()&#123;dataLayer.push(arguments);&#125;</span></span><br><span class="line"><span class="addition">+   gtag(&#x27;js&#x27;, new Date());</span></span><br><span class="line"><span class="addition">+ </span></span><br><span class="line"><span class="addition">+   gtag(&#x27;config&#x27;, &#x27;G-K8QW91NNBQ&#x27;);</span></span><br><span class="line"><span class="addition">+ &lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>Step3：重新部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>完成上面兩個設置就可以重新部署後再次檢查 GA 是否成功。</p>
          </div>

<p><img src="https://imgur.com/60AW6rA.jpg" alt="進到 GA 中點選左邊側邊欄報表，有看到數字 1 就成功了！"></p>
<h2 id="Sitemap"><a href="#Sitemap" class="headerlink" title="Sitemap"></a>Sitemap</h2><blockquote>
<p>Sitemap 檔案會提供網頁中的相關資訊給搜尋引擎，Google 的爬蟲會定期爬 sitemap.xml 檔案，若有更新他就會去爬你的網站並加入到搜尋引擎中。</p>
</blockquote>
<p>Step1：安裝指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap</span><br></pre></td></tr></table></figure>

<p>Step2：根目錄 _config.yml 在最後面添加新參數</p>
<ul>
<li>之後只要指令有 <code>hexo g</code> 時，就會自動生成 sitemap.xml。</li>
</ul>
<figure class="highlight diff"><figcaption><span>.git/config</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="addition">+ # Sitemap</span></span><br><span class="line"><span class="addition">+ sitemap:</span></span><br><span class="line"><span class="addition">+   path: sitemap.xml</span></span><br></pre></td></tr></table></figure>

<p>Step3：重新部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>

<p>Step4：<a href="https://search.google.com/search-console/about?hl=zh-tw">Google Search</a> 設置加入網站連結</p>
<ul>
<li>GA 屬於一種驗證方式，剛剛有成功設置 GA 所以會自動驗證成功。</li>
</ul>
<p><img src="https://imgur.com/MCx0dFO.jpg"></p>
<p>Step5：提交 sitemap</p>
<ul>
<li>在新增 Sitemap 欄位中輸入 <code>sitemap.xml</code></li>
</ul>
<p><img src="https://imgur.com/D2VrXHx.jpg"></p>
<p>Step6：檢查 sitemap</p>
<ul>
<li>檢查自己的網址後面加上 <code>/sitemap</code> 或 <code>/sitemap.xml</code> 後查看是否有內容。</li>
</ul>
<p><img src="https://imgur.com/2yYRM6p.jpg" alt="https://kentdoit.github.io/sitemap"></p>
<div class="note default">
            <p>如果<strong>運氣好</strong>到這邊應該是成功了，<del>運氣不好</del>會發覺網址看有內容，但是狀態為<code>無法擷取</code>。</p>
          </div>

<p><img src="https://imgur.com/Ae8Sllt.jpg"></p>
<div class="note default">
            <p>礙於 debug 篇幅過長，將過程記錄在另一篇 <a href="https://kentdoit.github.io/hexo/2629412870/">Hexo Sitemap 建立索引 無法擷取</a> 文章中。</p>
          </div>

<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://israynotarray.com/hexo/20190514/2072033203/">Hexo搜尋引擎優化</a><br><a href="https://zenreal.github.io/posts/7993/">Hexo 搭建系列 - SEO優化篇</a><br><a href="https://syj0905.github.io/hexo/20190906/285599935/">Hexo 架站攻略 - SEO 優化</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo SEO</tag>
      </tags>
  </entry>
  <entry>
    <title>架設部落格 Hexo 部署 Github (零)</title>
    <url>/hexo/1074258594/</url>
    <content><![CDATA[<h2 id="Hexo-環境"><a href="#Hexo-環境" class="headerlink" title="Hexo 環境"></a>Hexo 環境</h2><p>Step1：下載 Hexo 環境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p>Step2：檢查 hexo 版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure>

<p><img src="https://imgur.com/eskxR6o.png"></p>
<p>Step3：建立 Hexo（projectname 替換成自己的名稱）</p>
<div class="note default">
            <p>之後會用於 github repository，建議這邊 projectname 設置為 <code>自己 github 帳號+.github.io</code><br>例如：<a href="https://kentdoit.github.io/">kentdoit.github.io</a>。（github pages 會自動將英文轉小寫）</p>
          </div>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init projectname</span><br></pre></td></tr></table></figure>

<p><img src="https://imgur.com/UQw03Y3.png" alt="Hexo 建立完成畫面"></p>
<p>Step4：進入 Hexo 目錄</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd projectname</span><br></pre></td></tr></table></figure>

<p>Step5：安裝相依套件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>Step6：在本地端把 server run 起來</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>成功的話會看到下方畫面（預設主題為 landscape）</p>
          </div>

<p><img src="https://imgur.com/P8oLEQt.png"></p>
<blockquote>
<p>在本地端啟動 Hexo 伺服器，預設路徑為：<code>http://localhost:4000/</code><br>這種方法只能本地瀏覽，無法從外部瀏覽，那怎麼做才能從外部瀏覽？</p>
</blockquote>
<div class="note default">
            <p>免費仔當然就是用 <span class="label danger">免費</span> github pages 啦～～</p>
          </div>

<h2 id="部署到-GitHub"><a href="#部署到-GitHub" class="headerlink" title="部署到 GitHub"></a>部署到 GitHub</h2><p>Step1：安裝 Git 部署套件（預設 Hexo 沒有安裝）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>Step2：修改 <code>deploy</code> 參數</p>
<figure class="highlight diff"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line"><span class="deletion">-  type: </span></span><br><span class="line"><span class="addition">+  type: git # 模式</span></span><br><span class="line"><span class="addition">+  repo: h$$</span></span><br><span class="line"></span><br><span class="line">$$ttps://github.com/KentDoIt/KentDoIt.github.io.git # 自己 GitHub repo 連結</span><br><span class="line"><span class="addition">+  branch: master # 分支</span></span><br></pre></td></tr></table></figure>

<p>Step3：部署指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>

<p><img src="https://imgur.com/o6lXKWf.png" alt="403 error"></p>
<p>失敗的話把 repo 改為用 SSH（例如：<a href="mailto:git@github.com">git@github.com</a>:KentDoIt&#x2F;KentDoIt.github.io.git）</p>
<p>Step4：查看 pages</p>
<ul>
<li>github 專案底下 → 點擊右上角 齒輪 Settings → 左側 Pages</li>
</ul>
<div class="note default">
            <p>剛上傳會需要等一段時間，等到狀態變為綠色後點擊連結就可以看到和 local 端一樣的畫面。</p>
          </div>

<p><img src="https://imgur.com/CyCxriT.png" alt="pages 狀態比較圖"></p>
<h2 id="Hexo-目錄架構"><a href="#Hexo-目錄架構" class="headerlink" title="Hexo 目錄架構"></a>Hexo 目錄架構</h2><blockquote>
<p>下方會介紹幾個 Hexo 目錄架構中比較常用到的資料夾以及檔案。</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">├──</span> <span class="string">.deploy_git</span></span><br><span class="line"><span class="string">├──</span> <span class="string">.git</span></span><br><span class="line"><span class="string">├──</span> <span class="string">node_modules</span></span><br><span class="line"><span class="string">├──</span> <span class="string">public</span>           <span class="comment"># hexo g 後生成靜態網站</span></span><br><span class="line"><span class="string">├──</span> <span class="string">scaffolds</span>        <span class="comment"># 指令 new 產生的草稿、頁面、文章模板設置</span></span><br><span class="line"><span class="string">|</span>   <span class="string">├──</span> <span class="string">draft.md</span></span><br><span class="line"><span class="string">|</span>   <span class="string">├──</span> <span class="string">page.md</span></span><br><span class="line"><span class="string">|</span>   <span class="string">└──</span> <span class="string">post.md</span>      <span class="comment"># 生成文章的模版</span></span><br><span class="line"><span class="string">├──</span> <span class="string">source</span></span><br><span class="line"><span class="string">|</span>   <span class="string">├──</span> <span class="string">_drafts</span></span><br><span class="line"><span class="string">|</span>   <span class="string">└──</span> <span class="string">_posts</span>       <span class="comment"># 文章資料夾（markdown 檔）</span></span><br><span class="line"><span class="string">├──</span> <span class="string">themes</span>           <span class="comment"># theme 版型資料夾</span></span><br><span class="line"><span class="string">|</span>   <span class="string">└──</span> <span class="string">landscape</span>    <span class="comment"># 預設 theme</span></span><br><span class="line"><span class="string">|</span>       <span class="string">└──</span> <span class="string">_config.yml</span>  <span class="comment"># 版型樣式設定參數</span></span><br><span class="line"><span class="string">├──</span> <span class="string">.gitignore</span></span><br><span class="line"><span class="string">├──</span> <span class="string">_config.yml</span>      <span class="comment"># 基本部署設定</span></span><br><span class="line"><span class="string">├──</span> <span class="string">db.json</span></span><br><span class="line"><span class="string">├──</span> <span class="string">package.json</span></span><br><span class="line"><span class="string">└──</span> <span class="string">package-lock.json</span></span><br></pre></td></tr></table></figure>

<p>node_modules：依照 package.json 所安裝的套件。</p>
<ul>
<li>對應的指令：<code>npm install</code></li>
</ul>
<p>public：編譯產生靜態檔案後存放的位置。</p>
<ul>
<li>對應的指令：<code>hexo g</code></li>
</ul>
<p>scaffolds：存放 layout 模版，Hexo 會根據 scaffolds 模板來建立檔案。（預設 layout 沒輸入就是 post）</p>
<ul>
<li>對應的指令：<code>hexo new [layout] &lt;title&gt;</code></li>
</ul>
<p>source：新增文章後存放的位置。</p>
<ul>
<li>對應的指令：<code>hexo new [layout] &lt;title&gt;</code></li>
</ul>
<p>themes：存放 Hexo 主題的位置，（預設 themes 為 landscape），Hexo 會依據放在該資料夾底下的主題與 _config.yml 設置來編譯產生靜態檔案。</p>
<p>_config.yml：Hexo 編譯網站的設定檔。</p>
<p>package.json：管理相依套件的版本。</p>
<p>.gitignore：部署時要忽略特定檔案或資料夾。</p>
<p>package-lock.json：主要用途是記錄當前安裝的每一個套件版本，確認是否安裝到正確的套件版本。（基本上不會動到這個檔案，只有在新增、刪除以及更新套件時，它才會有變化）</p>
<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul>
<li>ray <a href="https://israynotarray.com/hexo/20190411/932826160/">Hexo教學 Next主題設定與頁面功能(Ver. 8)</a></li>
<li><a href="https://ed521.github.io/2019/07/hexo-install/">[教學] 使用 GitHub Pages + Hexo 來架設個人部落格</a></li>
<li>ray <a href="https://israynotarray.com/hexo/20200917/636983586/">(4) 試著學 Hexo - 認識 Hexo 目錄結構</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo 部落格</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Sitemap 建立索引 無法擷取</title>
    <url>/hexo/2629412870/</url>
    <content><![CDATA[<div class="note default">
            <p>此篇內容為 <a href="https://kentdoit.github.io/hexo/599670072/">Hexo 設置 GA、Sitemap（四）</a>的 Debug 延續篇，介紹如何解決無法擷取以及設置索引。</p>
          </div>

<h2 id="範例的環境版本"><a href="#範例的環境版本" class="headerlink" title="範例的環境版本"></a>範例的環境版本</h2><p>hexo 版本：6.0.1<br>hexo-cli 版本：4.3.0<br>next 版本：7.8.0</p>
<h2 id="無法擷取"><a href="#無法擷取" class="headerlink" title="無法擷取"></a>無法擷取</h2><p><img src="https://imgur.com/UH0jdLH.jpg"></p>
<div class="note default">
            <p>下方會介紹四種我嘗試過的方法。</p>
          </div>

<h3 id="擁有權驗證"><a href="#擁有權驗證" class="headerlink" title="擁有權驗證"></a>擁有權驗證</h3><p>❌ 方法一：添加其他驗證方式（本來只有用 GA）</p>
<p>Step1：取得 content 值</p>
<ul>
<li>記得在複製內容中只擷取 content 值就好。</li>
</ul>
<p><img src="https://imgur.com/N623p1p.jpg" alt="演示四步驟取得 content"></p>
<p>Step2：修改 NexT 主題中 _config.yml 參數 google_site_verification</p>
<ul>
<li>貼上取得的 content 值。</li>
</ul>
<figure class="highlight diff"><figcaption><span>.git/config</span></figcaption><table><tr><td class="code"><pre><span class="line"># Google Webmaster tools verification.</span><br><span class="line"># See: https://www.google.com/webmasters</span><br><span class="line"><span class="addition">+ google_site_verification: 25miYVaewg4Qur_GPtoF9-GhCZZJNidmq2kqy6wRE9g</span></span><br><span class="line"><span class="deletion">- google_site_verification:</span></span><br></pre></td></tr></table></figure>

<p>Step3：重新部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

<p>Step4：重新部署後，檢查網站中是否包含 google-site-verification</p>
<p><img src="https://imgur.com/RVLo57e.jpg" alt="搜尋 google-site-verification"></p>
<h3 id="檢查-Sitemap-格式"><a href="#檢查-Sitemap-格式" class="headerlink" title="檢查 Sitemap 格式"></a>檢查 Sitemap 格式</h3><p>❌ 方法二：檢查 Sitemap 格式</p>
<blockquote>
<p>發覺我的 sitemap.xml 格式和官方範例不同，所以需要將多的標籤移除。</p>
</blockquote>
<p><img src="https://imgur.com/QnPnMb0.jpg" alt="格式比較"></p>
<p>Step1：將 node_modules&#x2F;hexo-generator-sitemap&#x2F;sitemap.xml 中的 <code>changefreq</code>、<code>priority</code> 標籤移除。</p>
<p>Step2：重新部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>參考這篇 <a href="https://zenreal.github.io/posts/7993/#google%E7%84%A1%E6%B3%95%E8%AE%80%E5%8F%96sitemap-%E4%B8%80%E8%88%AC%E7%9A%84http%E9%8C%AF%E8%AA%A4-%E8%A7%A3%E6%B1%BA%E6%96%B9%E5%BC%8F">Google無法讀取sitemap(一般的HTTP錯誤) 解決方式</a> 所提到的解法，雖然我沒有這個問題。</p>
          </div>

<p><img src="https://imgur.com/NkFfNmd.jpg" alt="記得要把所有多的標籤都移除呦，雖然也一樣沒成功"></p>
<h3 id="建立索引"><a href="#建立索引" class="headerlink" title="建立索引"></a>建立索引</h3><blockquote>
<p>為了將自己的網址透過 Google Search Console 建立索引，提交給 Google 使搜尋引擎能更容易地搜尋到我們的網站，這個也屬於提升 SEO 的其中一種方法。</p>
</blockquote>
<p>❌ 方法三：網址審查建立索引</p>
<p>Step1：點擊網址審查，並在上方網址列貼上部落格網址（例如：<a href="https://kentdoit.github.io/%EF%BC%89">https://kentdoit.github.io/）</a></p>
<p>Step2：按下建立索引</p>
<p><img src="https://imgur.com/VwNKDrB.jpg" alt="兩步驟建立索引"></p>
<div class="note default">
            <p>過一陣子之後再到網址審查中檢查就會看到綠色勾勾了，也代表建立索引成功了～～～<br>雖然不確定是時間還沒到還是因為 .nojekyll，但至少之後用其他文章連結也有成功建立索引 (੭•̀ᴗ•̀)੭</p>
          </div>

<p><img src="https://imgur.com/iR7NAzQ.jpg" alt="網址審查通過"></p>
<h3 id="建立-nojekyll"><a href="#建立-nojekyll" class="headerlink" title="建立 .nojekyll"></a>建立 .nojekyll</h3><p>❌ 方法四：建立 .nojekyll</p>
<p>Step1：進入根目錄 source 資料夾底下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd source</span><br></pre></td></tr></table></figure>

<p>Step2：建立一個空白的 .nojekyll 檔案</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch .nojekyll</span><br></pre></td></tr></table></figure>

<p><img src="https://imgur.com/BFbbf5V.jpg"></p>
<div class="note default">
            <p>接下來設定是為了讓每次部署產生的 public 資料夾中也能存在 .nojekyll 檔案</p>
          </div>

<p>Step3：修改根目錄 _config.yml 參數</p>
<figure class="highlight diff"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"># Include / Exclude file(s)</span><br><span class="line">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span><br><span class="line">include:</span><br><span class="line"><span class="addition">+  .nojekyll</span></span><br><span class="line">exclude:</span><br><span class="line">ignore:</span><br></pre></td></tr></table></figure>

<p>Step4：重新部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>雖然建立索引成功了，但 Sitemap 狀態還是呈現 <code>無法擷取</code> 以及 <code>未提交至 Sitemap</code>，最後沒辦法只好靜待幾天看看會不會發生奇蹟</p>
          </div>

<h2 id="未提交至-Sitemap"><a href="#未提交至-Sitemap" class="headerlink" title="未提交至 Sitemap"></a>未提交至 Sitemap</h2><h2 id="可讀取-Sitemap，但其中含有錯誤"><a href="#可讀取-Sitemap，但其中含有錯誤" class="headerlink" title="可讀取 Sitemap，但其中含有錯誤"></a>可讀取 Sitemap，但其中含有錯誤</h2><p><img src="https://imgur.com/tYWXLmz.jpg"></p>
<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://blog.kyomind.tw/adding-sitemap-issue/">解決 Hexo + Github Pages 新增 sitemap.xml 找不到頁面</a><br><a href="https://blog.balabambe.com/2021/12/01/%E8%A7%A3%E6%B1%BA-Google-Search-Console-%E6%8A%93%E4%B8%8D%E5%88%B0-Hexo-%E6%94%BE%E5%9C%A8-Github-Pages-%E7%9A%84-sitemap-xml-%E7%9A%84%E5%95%8F%E9%A1%8C/">解決 Google Search Console 抓不到 Hexo 放在 Github Pages 的 sitemap.xml 的問題</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo SEO</tag>
      </tags>
  </entry>
  <entry>
    <title>JS == vs ===</title>
    <url>/javascript/3699626031/</url>
    <content><![CDATA[<p><img src="https://imgur.com/7TLQ2Yr.jpg" alt="綜合比較表 src：https://github.com/dorey/JavaScript-Equality-Table"></p>
<p>比較運算子注意事項</p>
<div class="note default">
            <p>在 JavaScript 中除了基礎型別（Primitive Type）以外的型別（ex: 陣列、物件）在做比較時，判斷的是兩者是否指向同一個 <code>reference</code>，而非判斷兩者的值是否相同。</p>
          </div>

<p>e.g. 陣列判斷</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span> , <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">1</span> , <span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == b); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c == b); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>下方會範例會使用基礎型別（Primitive Type）來演示。</p>
          </div>

<h2 id="x3D"><a href="#x3D" class="headerlink" title="&#x3D;"></a>&#x3D;</h2><blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Assignment">Assignment 賦值運算子</a></p>
</blockquote>
<div class="note primary">
            <p>assignment：將等號右邊值賦予到左邊的變數。</p>
          </div>

<figure class="highlight js"><figcaption><span>e.g. 賦予值</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h2 id="x3D-x3D"><a href="#x3D-x3D" class="headerlink" title="&#x3D;&#x3D;"></a>&#x3D;&#x3D;</h2><blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Equality">Equality 相等比較</a>，</p>
</blockquote>
<div class="note primary">
            <p>equality：比較等號兩邊值是否相同，當等號兩邊型別不同時，會先依照規則轉型再進行比對。（除了物件外，幾乎會轉型為 number 後在做比較）</p>
          </div>

<div class="note default">
            <p>紀錄一下看到的其它名稱：<br>Double equals operator （寬鬆相等）<br>equality comparison operator（相等比較運算子）<br>abstract comparison operator（抽象比較運算子）</p>
          </div>

<figure class="highlight js"><figcaption><span>e.g. </span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span> == <span class="number">1</span>); <span class="comment">// true，1 == 1</span></span><br></pre></td></tr></table></figure>

<p><img src="https://imgur.com/9I2G4tQ.jpg" alt="== 比較表"></p>
<h2 id="x3D-x3D-x3D"><a href="#x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;</h2><blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Strict_equality">Strict equality 嚴格相等比較</a></p>
</blockquote>
<div class="note primary">
            <p>strict equality：比較等號兩邊 <code>型別</code> 以及 <code>數值</code> 是否 <code>都相同</code>。</p>
          </div>

<div class="note default">
            <p>紀錄一下看到的其它名稱：<br>identity comparison operator（身份比較運算子）<br>strict comparison operator（嚴格比較運算子）</p>
          </div>

<figure class="highlight js"><figcaption><span>e.g. </span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span> === <span class="number">1</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p><img src="https://imgur.com/I3piMnw.jpg" alt="=== 比較表"></p>
<h2 id="自動轉型差異"><a href="#自動轉型差異" class="headerlink" title="自動轉型差異"></a>自動轉型差異</h2><p>&#x3D;&#x3D;：會依照規則轉型後再比較。<br>&#x3D;&#x3D;&#x3D;：不會轉型直接比較。</p>
<h2 id="例外"><a href="#例外" class="headerlink" title="例外"></a>例外</h2><blockquote>
<p>&#x3D;&#x3D; 寬鬆比對下等號兩邊為 undefined 和 null 則回傳 true。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> == <span class="literal">null</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>&#x3D;&#x3D; 寬鬆比對下空字串（字串為空或是僅有空白）則代表 false。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span> == <span class="literal">false</span>);    <span class="comment">// true，0 == 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;  &#x27;</span> == <span class="literal">false</span>);  <span class="comment">// true，0 == 0</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>&#x3D;&#x3D; 寬鬆比對下等號兩邊型別不同時，除了 object 外幾乎是轉型成 number 在做比對，</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> == <span class="number">1</span>);      <span class="comment">// true，1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> == <span class="string">&#x27;1&#x27;</span>);    <span class="comment">// true，1 == 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> == <span class="string">&#x27;true&#x27;</span>); <span class="comment">// false，1 == NaN</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>非基礎型別、symbols 還需要比較 reference，相同才會回傳 true。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> === <span class="literal">true</span>);           <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>(<span class="number">1</span>) === <span class="title class_">Symbol</span>(<span class="number">1</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; === &#123;&#125;);               <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> sym = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([obj].<span class="title function_">includes</span>(obj));     <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([sym].<span class="title function_">includes</span>(sym));     <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>NaN</p>
</blockquote>
<ul>
<li>等號其中一邊只要有 NaN 則回傳 false 。（一般會使用 isNan 去判斷 NaN）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> == <span class="title class_">NaN</span>);  <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>兩者皆為 0 則回傳 true。（不管正負）</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> === -<span class="number">0</span>);    <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> === -<span class="number">1</span>);    <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h2 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h2><blockquote>
<p>&#x3D;&#x3D; 特殊使用情境</p>
</blockquote>
<figure class="highlight js"><figcaption><span>判斷是否為 null、undefined</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (x === <span class="literal">null</span> || x === <span class="literal">undefined</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// == 特性等號左右兩邊為 null、undefined 會回傳 true</span></span><br><span class="line"><span class="keyword">if</span> (x == <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><figcaption><span>判斷 typeof 值</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 因為 typeof 出來的值會是固定的 javascript 型別，只是可能隨著時間流逝版本會有差異（ex: bigint）</span></span><br><span class="line"><span class="keyword">if</span>( <span class="title function_">typeof</span>(x) == <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>建議還是使用 &#x3D;&#x3D;&#x3D; 嚴格比對。（除非非常暸解，且熟悉特殊情境時使用 ex：判斷是否為 null、undefined）</p>
          </div>

<h2 id="references"><a href="#references" class="headerlink" title="references"></a>references</h2><p><a href="https://ithelp.ithome.com.tw/articles/10282758">為了轉生而點技能-JavaScript，難題紀錄(二)隱式轉換規則及&#x3D;&#x3D;&#x3D;、&#x3D;&#x3D;</a><br><a href="https://eddychang.me/js-object-plus-object">JS中的 {} + {} 與 {} + [] 的結果是什麼？</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>運算子</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 比較運算子的自動轉型</title>
    <url>/javascript/2972146539/</url>
    <content><![CDATA[<p>比較運算子注意事項</p>
<div class="note default">
            <p>在 JavaScript 中除了基礎型別（Primitive Type）以外的型別（ex: 陣列、物件）在做比較時，判斷的是兩者是否指向同一個 <code>reference</code>，而非判斷兩者的值是否相同。</p>
          </div>

<p>e.g. 陣列判斷</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span> , <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">1</span> , <span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == b); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c == b); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>下方會在針對其它例外情況做詳細介紹。</p>
          </div>

<h2 id="x3D-x3D"><a href="#x3D-x3D" class="headerlink" title="&#x3D;&#x3D;"></a>&#x3D;&#x3D;</h2><div class="note primary">
            <p>equality：比較等號兩邊值是否相同，當等號兩邊型別不同時，會先依照規則轉型再進行比對。（除了物件外，幾乎會轉型為 number 後在做比較）</p>
          </div>

<p>e.g. 基礎 equality</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span> == <span class="number">1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>下方會解析 ECMA-262 11th（ES2020）規範：<a href="https://262.ecma-international.org/11.0/#sec-abstract-equality-comparison">7.2.15 Abstract Equality Comparison</a> 是如何比較的以及轉型的過程。</p>
          </div>

<blockquote>
<p>Step1：先檢查型別，型別相同則回傳 x &#x3D;&#x3D;&#x3D; y 的結果。</p>
</blockquote>
<p><img src="https://imgur.com/O6GtcuY.jpg"></p>
<p>當型別相同，則不需要轉型因此可以直接比較。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b&#x27;</span> === <span class="string">&#x27;a&#x27;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Step2：等號兩邊為 null 和 undefined 回傳 true。</p>
</blockquote>
<p><img src="https://imgur.com/csTWjoh.jpg"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> == <span class="literal">null</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Step3：基礎型別自動轉成 number 後在做比較。（透過原生函式 ToNumber）</p>
</blockquote>
<p><img src="https://imgur.com/Mey9zi3.jpg"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span> == <span class="number">1</span>);       <span class="comment">// true，1 == 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> == <span class="string">&#x27;1&#x27;</span>);    <span class="comment">// true，1 == 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> == <span class="string">&#x27;true&#x27;</span>); <span class="comment">// false，1 == NaN</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>⭐️ Step4：先將非基礎型別轉成基礎型別後再做比較。（透過原生函示 toPrimitive）</p>
</blockquote>
<p><img src="https://imgur.com/RTWXolI.jpg"></p>
<div class="note default">
            <p>toPrimitive 將物件透過原生方法（ex：valueOf、toString）轉成基礎型別。</p>
          </div>

<p>string 的執行順序</p>
<ul>
<li>先執行 toString &gt; 還不是 primitive 在執行 valueOf &gt; 還不是 primitive 就噴 <code>TypeError</code>。</li>
</ul>
<p>number 的執行順序</p>
<ul>
<li>（PreferredType 預設為 number）先執行 valueOf &gt; 還不是 primitive 在執行 toString &gt; 還不是 primitive 就噴 <code>TypeError</code>。</li>
</ul>
<p>e.g. 觀察 toPrimitive 中 valueOf 、 toString 優先順序</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  toString : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;toString&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  valueOf : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;valueOf&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">String</span>(obj); <span class="comment">// toString -&gt; valueOf -&gt; TypeError</span></span><br><span class="line"><span class="title class_">Number</span>(obj); <span class="comment">// valueOf -&gt; toString -&gt; TypeError</span></span><br></pre></td></tr></table></figure>

<p>e.g. toPrimitive 自定義方法，依照 hint 種類輸出結果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kent&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&#x27;M&#x27;</span>,</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">toPrimitive</span>]: <span class="keyword">function</span>(<span class="params">hint</span>) &#123;</span><br><span class="line">    <span class="comment">// hint 三種 &#x27;string&#x27;, &#x27;number&#x27;, &#x27;default&#x27;</span></span><br><span class="line">    <span class="keyword">switch</span>(hint) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;default&#x27;</span>: <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">sex</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;string&#x27;</span>: <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;number&#x27;</span>: <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">      <span class="attr">default</span>: <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj == <span class="string">&#x27;M&#x27;</span>);            <span class="comment">// true，default</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(obj) == <span class="number">18</span>);     <span class="comment">// true，number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(obj) == <span class="string">&#x27;kent&#x27;</span>); <span class="comment">// true，string</span></span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>以上為 &#x3D;&#x3D; 比較運算子的自動轉型過程。</p>
          </div>

<hr>
<h2 id="x3D-x3D-x3D"><a href="#x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;</h2><div class="note default">
            <p>strict equality：比較等號兩邊 <code>型別</code> 以及 <code>數值</code> 是否 <code>都相同</code>。</p>
          </div>

<p>e.g. 基礎 strict equality</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span> === <span class="number">1</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>下方會解析 ECMA-262 11th（ES2020）規範：<a href="https://262.ecma-international.org/11.0/#sec-strict-equality-comparison">7.2.16 Strict Equality Comparison</a> 是如何比較的以及轉型的過程。</p>
          </div>

<blockquote>
<p>Step1：檢查型別，型別不同則回傳 false。</p>
</blockquote>
<p><img src="https://imgur.com/qXhuPgq.jpg"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span> === <span class="number">1</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Step2：型別為 number 時會回傳 <a href="https://www.ecma-international.org/ecma-262/11.0/index.html#sec-numeric-types-number-equal">Number::equal ( x, y )</a> 結果，型別為 BigInt 時會回傳 <a href="https://www.ecma-international.org/ecma-262/11.0/index.html#sec-numeric-types-bigint-equal">BigInt::equal ( x, y )</a> 結果。</p>
</blockquote>
<p><img src="https://imgur.com/EID9qm4.jpg"></p>
<div class="note default">
            <p>在這之前需要，先暸解 Number、BigInt 兩者的 equal ( x, y ) 規則。</p>
          </div>

<p>Number::equal ( x, y ) 規則：</p>
<p><img src="https://imgur.com/gGq66Sb.jpg"></p>
<ul>
<li>有 NaN 就回傳 false。</li>
<li>值相同就回傳 true。</li>
<li>兩者為 0 就回傳 true。（不管正負）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="number">1</span> === -<span class="number">1</span>);   <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> === -<span class="number">0</span>);    <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>BigInt::equal ( x, y ) 規則：</p>
<p><img src="https://imgur.com/PiEO17R.jpg"></p>
<ul>
<li>BigInt 值相同回傳 true，否則回傳 false。</li>
</ul>
<div class="note primary">
            <p>根據 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/BigInt">MDN 文件</a>：「BigInt 是一個內建的物件，提供了表示大於 “2 的 53 次方” 整數的功能 (“2 的 53 次方” 是 JavaScript 原生的 Number 能夠表示的最大值)」</p>
          </div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1n</span> === <span class="number">1n</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1n</span> === <span class="number">2n</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Step3：會依照 SameValueNonNumeric 規則回傳結果。</p>
</blockquote>
<p><img src="https://imgur.com/qivniM1.jpg"></p>
<p>SameValueNonNumeric ECMA Assert：</p>
<ul>
<li>兩者不是 <code>Number</code> 或 <code>BigInt</code> 型別。</li>
<li>兩者值不相同。</li>
</ul>
<p>SameValueNonNumeric 規則：</p>
<p><img src="https://imgur.com/L3oUg26.jpg"></p>
<ul>
<li>有 <code>undefined</code> 回傳 true。</li>
<li>有 <code>null</code> 回傳 true。</li>
<li><code>字串型別</code>時判斷字串是否相同，相同回傳 true 否則回傳 false。</li>
<li><code>boolean</code>、<code>symbol</code> 和 <code>object</code> 型別都是比較值是否相同 。(但 object、symbols 還需要比較 reference 是否相同)<ul>
<li>參考：<a href="https://stackoverflow.com/questions/61203925/how-does-the-array-prototype-includes-function-compare-objects">How does the Array.prototype.includes function compare objects</a></li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> === <span class="literal">true</span>);           <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>(<span class="number">1</span>) === <span class="title class_">Symbol</span>(<span class="number">1</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; === &#123;&#125;);               <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> sym = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([obj].<span class="title function_">includes</span>(obj));     <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([sym].<span class="title function_">includes</span>(sym));     <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h2><ul>
<li><code>object</code>、<code>symbols</code> 還需要比較 reference，指向同一個 <code>references</code> 才會回傳 true。</li>
<li><code>===</code> 不會做自動轉型。</li>
<li><code>==</code>  除了物件外，會轉型為 number 在做比較。</li>
<li>判斷是否為 <code>null</code> 、 <code>undefined</code> 可以使用 <code>==</code> 替代 <code>===</code> 。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (x === <span class="literal">null</span> || x === <span class="literal">undefined</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// == 特性等號左右兩邊為 null、undefined 會回傳 true</span></span><br><span class="line"><span class="keyword">if</span> (x == <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>常見迷思</p>
</blockquote>
<div class="note success">
            <p>&#x3D;&#x3D; 不會檢查型別，直接轉型。</p>
          </div>

<div class="note warning">
            <p>&#x3D;&#x3D; 第一步不是直接轉型，而是先檢查型別，再依造規則做轉型。</p>
          </div>

<blockquote>
<p>分享幾張 &#x3D;&#x3D; 、 &#x3D;&#x3D;&#x3D;、if 的視覺化圖表</p>
</blockquote>
<p><a href="https://github.com/dorey/JavaScript-Equality-Table">src：JavaScript-Equality-Table</a></p>
<p><img src="https://imgur.com/Ys0CgUz.jpg" alt="=== 比較表"></p>
<p><img src="https://imgur.com/WzPfFFf.jpg" alt="== 比較表"></p>
<p><img src="https://imgur.com/wd4ydIB.jpg" alt="綜合比較表"></p>
<p><img src="https://imgur.com/OtmX7k7.jpg" alt="if/else （綠色代表 true、白色代表 false）"></p>
<p>最後一張：<a href="https://thomas-yang.me/projects/oh-my-dear-js/">Relational and Equality Operators</a></p>
<p><img src="https://imgur.com/Og8Y5JH.jpg" alt="依照嚴格程度排序不同的比較子（紅色最嚴格、灰色最寬鬆）"></p>
<div class="note default">
            <p>最後建議新手一律使用嚴謹的 &#x3D;&#x3D;&#x3D; 進行比較，避免因為自動轉型而產生非預期的結果，有經驗的就可以自由使用兩者囉。</p>
          </div>

<h2 id="references"><a href="#references" class="headerlink" title="references"></a>references</h2><p>白話文：<a href="https://medium.com/schaoss-blog/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%8D%81-13-js-%E7%82%BA%E4%BB%80%E9%BA%BC%E5%88%A4%E6%96%B7%E7%9B%B8%E7%AD%89%E6%99%82%E4%B8%8D%E7%94%A8%E8%83%BD%E9%9B%99%E7%AD%89%E8%99%9F-d02fbf91492f">前端三十｜13. [JS] 為什麼判斷相等時不能用雙等號？</a><br>簡單解析ES6文件：<a href="https://stringpiggy.hpd.io/javascript-double-equals-triple-equals/#tldr">JavaScript 可愛筆記 #0 – 兩個等於真的有那麼壞嗎？</a><br>解析 ToPrimitive：<a href="https://sinaad.github.io/xfe/2016/04/15/ToPrimitive/">js隐式装箱-ToPrimitive</a><br>stackoverflow 討論：<a href="https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons">Which equals operator (&#x3D;&#x3D; vs &#x3D;&#x3D;&#x3D;) should be used in JavaScript comparisons?</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>運算子</tag>
        <tag>JavaScript</tag>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 邏輯運算子</title>
    <url>/javascript/1047366401/</url>
    <content><![CDATA[<h2 id="邏輯運算子-Logical-Operators"><a href="#邏輯運算子-Logical-Operators" class="headerlink" title="邏輯運算子 (Logical Operators)"></a>邏輯運算子 (Logical Operators)</h2><p><img src="https://imgur.com/1ynLfOn.jpg" alt="三種常見邏輯運算子介紹"></p>
<div class="note default">
            <p>最常見用途為 <code>if 判斷式</code>並搭配 <code>比較運算子</code> 一起使用，透過 <code>邏輯運算子</code> 回傳運算結果為 true 或 false。</p>
          </div>

<h3 id="邏輯運算子-OR"><a href="#邏輯運算子-OR" class="headerlink" title="|| 邏輯運算子 OR"></a>|| 邏輯運算子 OR</h3><div class="note primary">
            <p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR">Logical OR</a>：其中一側為 true 就會回傳 true，兩個皆為 false 才會回傳 false。</p>
          </div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">3</span> === <span class="number">3</span> || <span class="number">1</span> == <span class="string">&#x27;2&#x27;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;true&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="amp-amp-邏輯運算子-AND"><a href="#amp-amp-邏輯運算子-AND" class="headerlink" title="&amp;&amp; 邏輯運算子 AND"></a>&amp;&amp; 邏輯運算子 AND</h3><div class="note primary">
            <p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND">Logical AND</a>：其中一側為 false 就會回傳 false，兩個皆為 true 才會回傳 true。</p>
          </div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">3</span> === <span class="number">3</span> &amp;&amp; <span class="number">2</span> == <span class="string">&#x27;2&#x27;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;true&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="邏輯運算子-NOT"><a href="#邏輯運算子-NOT" class="headerlink" title="! 邏輯運算子 NOT"></a>! 邏輯運算子 NOT</h3><div class="note primary">
            <p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_NOT">Logical NOT</a>：將布林值反向。</p>
          </div>

<div class="note default">
            <p>將非布林變數自動轉型為布林值的特性，衍伸出另一種用法 <code>!! 將型別轉型為布林</code> 達到和 <code>Boolean(變數)</code> 相同效果。</p>
          </div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="literal">true</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!<span class="string">&#x27;&#x27;</span>);  <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!<span class="string">&#x27;a&#x27;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><img src="https://imgur.com/tqCYUbe.jpg" alt="型別轉換過程解析"></p>
<blockquote>
<p>邏輯運算子 tips</p>
</blockquote>
<ol>
<li>JS 中邏輯運算子僅支援符號寫法，不支援英文寫法。<br><img src="https://imgur.com/fnGTg2x.jpg"></li>
<li>依照權重高低，有優先順序。（<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#table">運算子優先順序 operator precedence</a>）<br><img src="https://imgur.com/VF2aXkz.jpg"></li>
</ol>
<hr>
<h2 id="真值（truthy）、假值（falsy）"><a href="#真值（truthy）、假值（falsy）" class="headerlink" title="真值（truthy）、假值（falsy）"></a><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy">真值（truthy）</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy">假值（falsy）</a></h2><div class="note default">
            <p>JS 將轉換為布林型別後為 true 的值稱為 <code>真值（truthy)</code>，false 的值稱為 <code>假值 (falsy)</code>。</p>
          </div>

<blockquote>
<p>類型定義</p>
</blockquote>
<ul>
<li>假值：<ul>
<li><code>false</code></li>
<li><code>null</code></li>
<li><code>NaN</code></li>
<li><code>0、-0</code></li>
<li><code>空字串 (&quot;&quot; 或 &#39;&#39; 或 ``)</code></li>
<li><code>undefined</code></li>
</ul>
</li>
<li>真值：<ul>
<li>除了上述<code>假值</code>類型以外的值都是<code>真值</code>。</li>
</ul>
</li>
</ul>
<p>常見用法：判斷是否有值</p>
<div class="note default">
            <p>在函數前方做資料判斷是否為空的防呆機制，判斷是否為我們預期的資料型別，不是的話 retuen 回去讓程式不再往下執行。</p>
          </div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isAdult</span>(<span class="params">age</span>) &#123; </span><br><span class="line">  <span class="comment">// 判斷是否為假值</span></span><br><span class="line">  <span class="keyword">if</span> (!age) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;資料錯誤&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> age &gt;= <span class="number">18</span> ? <span class="string">&#x27;已成年&#x27;</span> : <span class="string">&#x27;未成年&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">isAdult</span>(<span class="literal">null</span>); <span class="comment">// 資料錯誤</span></span><br><span class="line"><span class="title function_">isAdult</span>(<span class="number">18</span>);   <span class="comment">// 已成年</span></span><br><span class="line"><span class="title function_">isAdult</span>(<span class="number">17</span>);   <span class="comment">// 未成年</span></span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>運算子並非只能回傳 true、false，在 javascript 中邏輯運算子也能回傳<code>非布林</code>的值。（有興趣可以參考這篇短路求值介紹，其中有示範操作非布林的值的方法）</p>
          </div>

<p>真值表：依照嚴格程度排序不同的比較子（紅色最嚴格、灰色最寬鬆）<br><img src="https://imgur.com/Og8Y5JH.jpg" alt="src: https://thomas-yang.me/projects/oh-my-dear-js/"></p>
<h2 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h2><ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#table">運算子優先順序 operator precedence</a></li>
</ol>
<div class="note default">
            <p>理解優先順序 <code>! &gt; &amp;&amp; &gt; || &gt; ??</code>，讓邏輯運算子用起來沒煩惱。</p>
          </div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> || <span class="literal">false</span> &amp;&amp; <span class="literal">false</span>)    <span class="comment">// true → (true || false)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="literal">true</span> || <span class="literal">false</span>) &amp;&amp; <span class="literal">false</span>)  <span class="comment">// false → (true &amp;&amp; false)</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>括號內會強制轉型</li>
</ol>
<div class="note default">
            <p>if 判斷式會將 <code>括號</code> 內變數 <code>強制轉型</code> 成布林值。</p>
          </div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;true&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;true&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;true&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="number">0</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;true&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul>
<li><a href="https://ithelp.ithome.com.tw/articles/10191343">重新認識 JavaScript: Day 08 Boolean 的真假判斷</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>運算子</tag>
        <tag>JavaScript</tag>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 物件實字 | 物件字面值 | Object Literal</title>
    <url>/javascript/2900651289/</url>
    <content><![CDATA[<h2 id="Literal"><a href="#Literal" class="headerlink" title="Literal"></a>Literal</h2><blockquote>
<p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Literal">MDN</a> 定義：<strong>Literals</strong> represent values in JavaScript. These are fixed values—not variables—that you <em>literally</em> provide in your script.</p>
</blockquote>
<div class="note primary">
            <p>Literals 在 JavaScript 代表固定的值（Fixed values）而不是變數的值。</p>
          </div>

<p>JS 提供六種 Literal 類型</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#array_literals">Array literals</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#boolean_literals">Boolean literals</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#floating-point_literals">Floating-point literals</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#numeric_literals">Numeric literals</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#object_literals">Object literals</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#regexp_literals">RegExp literals</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#string_literals">String literals</a></li>
</ul>
<div class="note default">
            <p>下方只針對 <code>物件實字 Object Literal</code> 來做介紹以及範例。</p>
          </div>

<hr>
<h2 id="物件實字（物件字面值）-Object-Literal"><a href="#物件實字（物件字面值）-Object-Literal" class="headerlink" title="物件實字（物件字面值） Object Literal"></a>物件實字（物件字面值） Object Literal</h2><div class="note default">
            <p>使用 <code>大括號{}</code> 來建立物件的方式，就稱為 <code>物件實字 (Object Literals)</code>。</p>
          </div>

<blockquote>
<p>物件用法 tips</p>
</blockquote>
<ul>
<li>用大括號 {}。</li>
<li>每一筆資料包含 key、value，在物件中 key 為<code>屬性 (Properties)</code> 、value 為 <code>對名值對 (name-value pairs)</code> 。</li>
<li>多筆資料用逗號（comma）隔開。</li>
<li>宣告完後，還是可以再增加 <code>屬性</code> 進去。</li>
</ul>
<p>e.g. 基礎物件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kent&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">born</span>: <span class="string">&#x27;2017-05-12&#x27;</span>,</span><br><span class="line">  <span class="attr">showInfo</span>: <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> 今年 <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> 歲`</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>下方會介紹幾種 ES6 推出的新特性 Enhanced Object Literals，使物件實字寫起來更簡潔的寫法。 </p>
          </div>

<h2 id="物件屬性"><a href="#物件屬性" class="headerlink" title="物件屬性"></a>物件屬性</h2><div class="note default">
            <p>當 <code>屬性名稱</code> 和 <code>value 變數名稱</code> 相同時，只需要在括號中設置變數名稱即可。</p>
          </div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">let</span> msg1 = &#123;</span><br><span class="line">  <span class="attr">text</span>: <span class="string">&#x27;我是誰&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg1.<span class="property">text</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> text = <span class="string">&#x27;我是誰&#x27;</span>;</span><br><span class="line"><span class="comment">// 變數名稱 text 會變為物件屬性名稱，變數的值會變成對應的值</span></span><br><span class="line"><span class="keyword">let</span> msg2 = &#123;  <span class="comment">// 縮寫前</span></span><br><span class="line">  <span class="attr">text</span>: text</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> msg2 = &#123; text &#125;; <span class="comment">// 縮寫後</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg2.<span class="property">text</span>);</span><br></pre></td></tr></table></figure>

<h2 id="物件函示"><a href="#物件函示" class="headerlink" title="物件函示"></a>物件函示</h2><div class="note default">
            <p>省略了 <code>冒號 :</code> 和 <code>function 關鍵字</code>。</p>
          </div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;ES5&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="title function_">fn</span>());</span><br><span class="line"><span class="comment">// 箭頭函式寫法</span></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">fn</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 取得到 arguments 就是傳統函式，否則為箭頭函式的話會噴 ReferenceError</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>); <span class="comment">// ReferenceError</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;ES5&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="title function_">fn</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> obj3 = &#123;</span><br><span class="line">  <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>); <span class="comment">// Arguments [&#x27;arg&#x27;, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;ES6&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj3.<span class="title function_">fn</span>(<span class="string">&#x27;arg&#x27;</span>));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意事項</p>
</blockquote>
<ul>
<li>ES6 使用簡寫的方式，函式屬於不具名，因此無法使用箭頭函式。</li>
<li>ES6 預設的屬性名稱會是字串的型態。<ul>
<li>ex：<code>fn() &#123; /*...*/&#125;</code> 等同於 <code>&#39;fn&#39;() &#123; /*...*/&#125;</code>。</li>
</ul>
</li>
</ul>
<h2 id="具運算性的屬性名稱"><a href="#具運算性的屬性名稱" class="headerlink" title="具運算性的屬性名稱"></a>具運算性的屬性名稱</h2><div class="note default">
            <p>ES6 中使用 <code>中括號[]</code> 將<code>表達式</code>作為屬性名稱，即可透過運算子來賦予屬性名稱。</p>
          </div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [<span class="string">&quot;na&quot;</span>+<span class="string">&quot;me&quot;</span>]: <span class="string">&#x27;kent&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>); <span class="comment">// kent</span></span><br></pre></td></tr></table></figure>

<h2 id="Property-names"><a href="#Property-names" class="headerlink" title="Property names"></a>Property names</h2><h3 id="物件鍵使用-Dot-和-Square-Brackets-差異"><a href="#物件鍵使用-Dot-和-Square-Brackets-差異" class="headerlink" title="物件鍵使用 .Dot 和 []Square Brackets 差異"></a>物件鍵使用 .Dot 和 []Square Brackets 差異</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">obj<span class="number">.1</span> = <span class="number">1</span>;    <span class="comment">// Uncaught SyntaxError: Unexpected number</span></span><br><span class="line">obj.<span class="string">&quot;1&quot;</span> = <span class="number">1</span>;  <span class="comment">// Uncaught SyntaxError: Unexpected string</span></span><br><span class="line"></span><br><span class="line">obj[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">obj[<span class="string">&quot;1&quot;</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// ?</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)[<span class="number">0</span>])) <span class="comment">// ?</span></span><br></pre></td></tr></table></figure>

<div class="note primary">
            <p>Property accessors <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors#property_names/#Property%20names">MDN</a>：「Property names are string or Symbol. Any other value, including a number, is coerced to a string. This outputs ‘value’, since 1 is coerced into ‘1’.」<br>白話文：「屬性值型態要是 string or symbol，否則都會自動被轉為字串」</p>
          </div>

<blockquote>
<p>diff</p>
</blockquote>
<ol>
<li>上方範例因為 Property accessors 的特性，使物件訪問資料時使用 <code>.</code> Dot 的情況下會發生錯誤，而使用 <code>[]</code> Square Brackets 則不會有這個限制。</li>
<li>obj[1]、obj[“1”] 會訪問到同一筆資料，從 typeof 印出結果為 <code>string</code> 能證明 number 被自動轉型為 string 所以兩者會相等。</li>
</ol>
<div class="note danger">
            <p>使用 <code>[]</code> Square Brackets 雖然沒有了型別的限制，但會導致就算使用到保留字也不會出錯。</p>
          </div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">true</span>: <span class="string">&#x27;True Boolean&#x27;</span>,</span><br><span class="line">  <span class="attr">false</span>: <span class="string">&#x27;False Boolean&#x27;</span>,</span><br><span class="line">  <span class="attr">null</span>: <span class="string">&#x27;Null&#x27;</span>,</span><br><span class="line">  <span class="attr">undefined</span>: <span class="string">&#x27;Undefined&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="literal">true</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">true</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="literal">false</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">false</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="literal">null</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">null</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="literal">undefined</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">undefined</span>);</span><br></pre></td></tr></table></figure>

<h3 id="動態賦予屬性名稱"><a href="#動態賦予屬性名稱" class="headerlink" title="動態賦予屬性名稱"></a>動態賦予屬性名稱</h3><div class="note default">
            <p>ES6 中使用 <code>中括號[]</code> 動態來賦予屬性名稱，打破 Literal <code>固定的值（Fixed values）</code> 特性。</p>
          </div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> objKey = <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [objKey]: <span class="string">&#x27;kent&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>);  <span class="comment">// kent</span></span><br></pre></td></tr></table></figure>

<h2 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h2><ol>
<li>ES6 提升了物件實字語法的簡潔性和靈活性。</li>
<li>不建議使用非字串、保留字作為屬性名稱（雖然不會出錯，但很有可能產生非預期的錯誤）。</li>
</ol>
<h2 id="quiz"><a href="#quiz" class="headerlink" title="quiz"></a>quiz</h2><div class="note info">
            <p>最後用三個問題來結束這回合，大家可以試著回答看看。</p>
          </div>

<details>
  <summary>Q1：物件實字的屬性可以用數值嗎？</summary>
  <answer>A1：可以</answer>
<pre><code>let obj = &#123;
  0: 'num'
&#125;;
console.log(obj[0]); // num
</code></pre>
</details>

<details>
  <summary>Q2：ES6 函式縮寫是傳統函式還是箭頭函式？</summary>
  <answer>A2：箭頭函式，因為有印出 Arguments 類陣列。</answer>
<pre><code>let obj = &#123;
  fn() &#123;
    console.log(arguments); // Arguments []
    return 'ES6';
  &#125;
&#125;;
obj.fn();
</code></pre>
</details>

<details>
  <summary>Q3：ES6 可以動態設置屬性名稱嗎？</summary>
  <answer>A3：可以，使用中括號[]。</answer>
<pre><code>let objKey = 'name';
let obj = &#123;
  [objKey]: 'kent'
&#125;;
console.log(obj.name);  // kent
</code></pre>
</details>

<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul>
<li>PJ大大：<a href="https://pjchender.blogspot.com/2017/01/es6-object-literal-extension.html">[筆記]JavaScript ES6 中的物件的擴展 object literal extension）</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10208316">你不可不知的 JavaScript 二三事#Day23：ES6 物件實字威力加強版 (Enhanced Object Literals)</a></li>
<li><a href="https://chupai.github.io/posts/200515_js_object_literal_extension/">物件字面值擴充功能</a></li>
<li><a href="https://www.becomebetterprogrammer.com/can-javasscript-object-keys-be-numbers-or-non-string-values/">Can JavaScript Object Keys Be Numbers or Non-string Values?</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>物件</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 箭頭函式 arrow function</title>
    <url>/javascript/2638792469/</url>
    <content><![CDATA[<div class="note default">
            <p>箭頭函式是 ES6 新的語法糖，白話文來說，箭頭函式是傳統函式的<code>縮寫</code>，但有一些特性和邏輯不盡相同尤其是 this 的部分。</p>
          </div>

<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Functions/Arrow_functions">MDN 語法</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">([param] [, param]) =&gt; &#123;</span><br><span class="line">  statements</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">param =&gt; expression</span><br></pre></td></tr></table></figure>

<h2 id="縮寫特性"><a href="#縮寫特性" class="headerlink" title="縮寫特性"></a>縮寫特性</h2><blockquote>
<p>用一張圖來看箭頭函式這個語法糖究竟簡化了些什麼？</p>
</blockquote>
<div class="note default">
            <p>將 function 簡化為<code>箭頭 =&gt;</code>。</p>
          </div>

<p><img src="https://imgur.com/okxB6Sa.jpg"></p>
<h3 id="單行型式縮寫"><a href="#單行型式縮寫" class="headerlink" title="單行型式縮寫"></a>單行型式縮寫</h3><blockquote>
<p>規則</p>
</blockquote>
<ol>
<li>大括號括號可省略。</li>
<li>參數只有一個時，可以把參數的小括號省略。（沒有參數、兩個參數以上時不可省略小括號）</li>
<li>若需要回傳值則可省略 return。</li>
</ol>
<p><img src="https://imgur.com/hdFhyyI.jpg"></p>
<h3 id="縮寫-tips"><a href="#縮寫-tips" class="headerlink" title="縮寫 tips"></a>縮寫 tips</h3><div class="note default">
            <p>下方會用範例來演示撰寫箭頭函式時需要注意的 tips。</p>
          </div>

<ul>
<li>只有一個參數才不用加 <code>括號()</code>，否則會噴錯。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 錯誤</span></span><br><span class="line"><span class="keyword">const</span> arrowFn = =&gt; <span class="string">&#x27;箭頭函式&#x27;</span>; <span class="comment">// SyntaxError: Unexpected token &#x27;=&gt;&#x27;</span></span><br><span class="line"><span class="keyword">const</span> arrowFn = item, <span class="function"><span class="params">index</span> =&gt;</span> <span class="string">&#x27;箭頭函式&#x27;</span>; <span class="comment">// SyntaxError: Unexpected token &#x27;=&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正確</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">arrowFn</span> = (<span class="params"></span>) =&gt; <span class="string">&#x27;箭頭函式&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>參數、return 值有包含 <code>大括號 &#123;&#125;</code> 物件，則需要在外圍加上<code>小括號()</code> 將其包裹起來。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 錯誤</span></span><br><span class="line"><span class="keyword">const</span> arrowFn = &#123;name, sex&#125; =&gt; name;                 <span class="comment">// SyntaxError: Malformed arrow function parameter list</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">arrowFn2</span> = (<span class="params"></span>) =&gt; &#123;<span class="attr">name</span>: <span class="string">&#x27;kent&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;male&#x27;</span>&#125;;  <span class="comment">// SyntaxError: Unexpected token &#x27;:&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正確</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">arrowFn</span> = (<span class="params">&#123;name, sex&#125;</span>) =&gt; name;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">arrowFn2</span> = (<span class="params"></span>) =&gt; (&#123;<span class="attr">name</span>: <span class="string">&#x27;kent&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;male&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><div class="note primary">
            <p>箭頭函數中的 this 在<code>定義</code>時就綁定了不會更改，會將其綁定在定義的<code>執行環境</code>，另一種說法是會指向上一層的 this。</p>
          </div>

<figure class="highlight js"><figcaption><span>e.g. this 指向</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 傳統函式</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭頭函式</span></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">arrowFn</span>: <span class="function">() =&gt;</span> <span class="variable language_">this</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">fn</span>());         <span class="comment">// obj 物件</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="title function_">arrowFn</span>());   <span class="comment">// window 物件</span></span><br></pre></td></tr></table></figure>

<div class="note danger">
            <p>但有幾種特例情況會造成箭頭函式的 this 指向改變，而傳統函式的 this 物件指向是可變的，會隨著其呼叫的物件而有所改變。</p>
          </div>

<div class="note default">
            <p>下方範例會掩飾在不同的情況下，箭頭函式以及傳統函式兩者 this 指向的結果。（不會對 this 做詳細的介紹）</p>
          </div>

<h3 id="嚴格模式-simple-call"><a href="#嚴格模式-simple-call" class="headerlink" title="嚴格模式 simple call"></a>嚴格模式 simple call</h3><ul>
<li>傳統函式：指向 window，當函式 <code>沒有</code> 指定<code>呼叫物件</code>時，默認就會綁定在 <code>全域物件 window</code>。</li>
<li>箭頭函式：指向 undefined，因為不允許默認綁定。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123; </span><br><span class="line">  <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>()); <span class="comment">//window物件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arrowFn = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="string">&#x27;use strict&#x27;</span>; </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">arrowFn2</span> = (<span class="params"></span>) =&gt; <span class="variable language_">this</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">arrowFn2</span>()); <span class="comment">//undefined </span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">arrowFn</span>()); <span class="comment">//undefined </span></span><br></pre></td></tr></table></figure>

<h3 id="物件實字（object-literal）方法"><a href="#物件實字（object-literal）方法" class="headerlink" title="物件實字（object literal）方法"></a>物件實字（object literal）方法</h3><ul>
<li>傳統函式：指向 obj 物件，因此印出傳統函式。</li>
<li>箭頭函式：指向上一層 window 物件，由於物件特性沒有定義 type 會回傳 undefined。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 傳統函式</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;傳統函式&#x27;</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">type</span>);  <span class="comment">// 傳統函式</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭頭函式</span></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;箭頭函式&#x27;</span>,</span><br><span class="line">  <span class="attr">arrowFn</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">type</span>);  <span class="comment">// undefined</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">fn</span>();         </span><br><span class="line">obj1.<span class="title function_">arrowFn</span>();</span><br></pre></td></tr></table></figure>

<p><img src="https://imgur.com/wzpfSYj.jpg"></p>
<h3 id="call、apply、bind-方法"><a href="#call、apply、bind-方法" class="headerlink" title="call、apply、bind 方法"></a>call、apply、bind 方法</h3><div class="note default">
            <p>這三種方法會透過傳入物件，並將函式 this 指向其物件。</p>
          </div>

<ul>
<li>傳統函式：指向 obj 物件，因此印出傳統函式。</li>
<li>箭頭函式：指向 window 物件，由於箭頭函式特性（this 在 <code>定義</code> 時就綁定了不會更改）使其無法重新改變 this 指向。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Kent&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  <span class="comment">// obj 物件</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fnArrow</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  <span class="comment">// window 物件</span></span><br><span class="line">&#125;</span><br><span class="line">fnArrow.<span class="title function_">call</span>(obj); </span><br><span class="line">fn.<span class="title function_">call</span>(obj);</span><br></pre></td></tr></table></figure>

<h3 id="Prototype-物件原型"><a href="#Prototype-物件原型" class="headerlink" title="Prototype 物件原型"></a>Prototype 物件原型</h3><ul>
<li>傳統函式：回傳 5，指向 Member 物件。</li>
<li>箭頭函式：回傳 undefined，指向上一層 window 物件。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> type = <span class="string">&quot;window&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Member</span> = <span class="keyword">function</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Member</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getAge</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span> ,<span class="variable language_">this</span>); <span class="comment">// 5, Member 物件</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Member</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getAgeArrow</span> = <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span> ,<span class="variable language_">this</span>); <span class="comment">// undefined, window 物件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> customer = <span class="keyword">new</span> <span class="title class_">Member</span>(<span class="string">&#x27;Kent&#x27;</span>, <span class="number">5</span>);</span><br><span class="line">customer.<span class="title function_">getAge</span>();</span><br><span class="line">customer.<span class="title function_">getAgeArrow</span>();</span><br></pre></td></tr></table></figure>

<h3 id="DOM-監聽函式"><a href="#DOM-監聽函式" class="headerlink" title="DOM 監聽函式"></a>DOM 監聽函式</h3><div class="note default">
            <p>DOM 擁有自己的 this，當事件觸發時會將 this 指向觸發事件的元素本身。</p>
          </div>

<ul>
<li>傳統函式：函式被執行時指向元素本身。</li>
<li>箭頭函式：函式被執行時指向 window 物件。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;傳統函式&#x27;</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, <span class="variable language_">this</span>.<span class="property">type</span>); <span class="comment">// DOM element, &#x27;button&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, obj.<span class="property">fn</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;箭頭函式&#x27;</span>,</span><br><span class="line">  <span class="attr">fnArrow</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, <span class="variable language_">this</span>.<span class="property">type</span>); <span class="comment">// // window 物件, undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, obj1.<span class="property">fnArrow</span>);</span><br></pre></td></tr></table></figure>

<h2 id="arguments-參數"><a href="#arguments-參數" class="headerlink" title="arguments 參數"></a>arguments 參數</h2><div class="note danger">
            <p>箭頭函式沒有 arguments 參數使用的話會噴 Error。</p>
          </div>

<div class="note default">
            <p>解法：使用其餘參數（rest parameter）來替代，（arguments 是類陣列，其餘參數是陣列）</p>
          </div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="keyword">function</span> (<span class="params">parm</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">arrowFn</span> = (<span class="params">parm</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);      <span class="comment">// Arguments(3)</span></span><br><span class="line"><span class="title function_">arrowFn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// ReferenceError: arguments is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其餘參數（rest parameter）</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">arrowRestFn</span> = (<span class="params">...parm</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(parm);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">arrowRestFn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="constructor、prototype"><a href="#constructor、prototype" class="headerlink" title="constructor、prototype"></a>constructor、prototype</h2><ul>
<li>沒有原型（prototype）屬性，使用會回傳 undefined。</li>
<li>若使用於建構式（constructor），會在使用 new 時候噴 error。</li>
</ul>
<div class="note default">
            <p>在實體化物件的時候會改變 this 的指向，指向新的實體物件，但由於箭頭函式無法指向新的實體物件所以會噴錯。</p>
          </div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">arrowFn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn.<span class="property"><span class="keyword">prototype</span></span>);      <span class="comment">// &#123;constructor: ƒ&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrowFn.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title function_">fn</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title function_">arrowFn</span>(); <span class="comment">// TypeError: arrowFn is not a constructor</span></span><br></pre></td></tr></table></figure>

<h2 id="Array-prototype、陣列方法"><a href="#Array-prototype、陣列方法" class="headerlink" title="Array.prototype、陣列方法"></a>Array.prototype、陣列方法</h2><p><img src="https://imgur.com/oQML1lh.jpg" alt="正常傳統函式中的 Array 屬性"></p>
<div class="note default">
            <p>箭頭函式由於沒有 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array">Array</a> 這個屬性，因此無法使用陣列方法</p>
          </div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> calculate = &#123;</span><br><span class="line">  <span class="attr">array</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  <span class="attr">sum</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">array</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">result, item</span>) =&gt;</span> result + item)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//TypeError: Cannot read property &#x27;array&#x27; of undefined</span></span><br><span class="line">calculate.<span class="title function_">sum</span>()</span><br></pre></td></tr></table></figure>

<h2 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h2><p>箭頭函式 tips</p>
<ul>
<li>傳統函式縮寫且只有一個參數才不用加<code>括號 ()</code>。</li>
<li>特殊情況會造成 this 指向<code>改變</code>。</li>
<li>沒有 arguments 參數。</li>
<li>沒有 constructor、prototype。</li>
<li>沒有 Array 無法使用陣列方法。</li>
</ul>
<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul>
<li><a href="https://pjchender.dev/javascript/js-arrow-function/">[JS] 箭頭函式（arrow function）和它對 this 的影響</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10249940">JavaScript基本功修練：Day21 - 箭頭函式</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>箭頭函式</tag>
        <tag>this</tag>
        <tag>arguments</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 短路求值 Short-circuit evaluation</title>
    <url>/javascript/350805089/</url>
    <content><![CDATA[<div class="note primary">
            <p>快速複習一下<a href="https://kentdoit.github.io/javascript/1047366401/">邏輯運算子</a>：「當 AND 的第一個運算數的值為 false 時，其結果必定為 false；當 OR 的第一個運算數為 true 時，最後結果必定為 true。」</p>
          </div>

<div class="note default">
            <p>不熟悉 <code>真值（truthy）</code>、<code>假值（falsy）</code> 可以參考這篇<a href="https://kentdoit.github.io/javascript/1047366401/#%E7%9C%9F%E5%80%BC%EF%BC%88truthy%EF%BC%89%E3%80%81%E5%81%87%E5%80%BC%EF%BC%88falsy%EF%BC%89">文章</a>。</p>
          </div>

<blockquote>
<p>口訣</p>
</blockquote>
<ul>
<li><code>&amp;&amp;</code> 左邊是 <code>假值(falsy)</code> 則不會執行右邊。</li>
<li><code>||</code> 左邊是 <code>真值(truthy)</code> 則不會執行右邊。</li>
</ul>
<div class="note default">
            <p>下方範例運用 &amp;&amp;、|| 特性，演示將左右兩邊的 <code>表達式</code> 達到和 if 判斷式一樣的效果。</p>
          </div>

<p>e.g. 使用 <code>||</code> 來實作賦予預設值功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 短路求值寫法</span></span><br><span class="line"><span class="keyword">let</span> b = a || <span class="number">1</span>; <span class="comment">// a 不是真值所以會執行右邊，將 1 賦予到 b 變數上。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// if 寫法</span></span><br><span class="line"><span class="keyword">if</span> (!a) &#123;</span><br><span class="line">  <span class="keyword">let</span> b = a;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三元運算寫法</span></span><br><span class="line"><span class="keyword">let</span> b = a ? a : <span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>e.g. <code>&amp;&amp;</code> 透過判斷 <code>真假值</code> 來決定是否執行表達式（也可以執行函式）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kent&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 短路求值寫法（僅適用於只有一種結果的判斷式）</span></span><br><span class="line">person1.<span class="property">age</span> &gt;= <span class="number">18</span> &amp;&amp; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;person1.name&#125;</span> 已成年`</span>); <span class="comment">// person1.age &gt;= 18 是 true 所有會執行右邊 console.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// if 寫法</span></span><br><span class="line"><span class="keyword">if</span> (person1.<span class="property">age</span> &gt;= <span class="number">18</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;person1.name&#125;</span> 已成年`</span>);</span><br></pre></td></tr></table></figure>

<p>e.g. 判斷物件屬性是否存在</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> school = &#123;</span><br><span class="line">  <span class="attr">info</span>: &#123;</span><br><span class="line">    <span class="attr">student</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;kent&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 短路求值寫法</span></span><br><span class="line"><span class="keyword">let</span> name = obj.<span class="property">info</span>.<span class="property">teacher</span> &amp;&amp; obj.<span class="property">info</span>.<span class="property">teacher</span>.<span class="property">name</span>; <span class="comment">// 會透過先判斷上一層屬性是否存在，來預防噴錯</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// if 寫法</span></span><br><span class="line"><span class="keyword">let</span> name = obj.<span class="property">info</span>.<span class="property">teacher</span>.<span class="property">name</span>; <span class="comment">// TypeError: Cannot read properties of undefined (reading &#x27;name&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (obj.<span class="property">info</span>.<span class="property">teacher</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> name = obj.<span class="property">info</span>.<span class="property">teacher</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>短路求值 tips</p>
</blockquote>
<ol>
<li><code>短路求值</code> 使用表達式的情況下，只適用於沒有 else 的判斷式，需要有 else 可以使用 <code>三元運算子</code>。</li>
<li><code>短路求值</code> 不能帶 return。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isAdult</span>(<span class="params">age</span>) &#123; </span><br><span class="line">  <span class="comment">// 判斷是否為假值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 短路求值寫法（短路求值帶 return 會噴 error）</span></span><br><span class="line">  age &amp;&amp; <span class="keyword">return</span> <span class="string">&#x27;資料錯誤&#x27;</span>; <span class="comment">// SyntaxError: Unexpected token &#x27;return&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// if 寫法</span></span><br><span class="line">  <span class="keyword">if</span> (!age) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;資料錯誤&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 下方範例不適合用短路求值，因為會缺少 else 表達式。</span></span><br><span class="line">  <span class="keyword">let</span> res</span><br><span class="line">  <span class="comment">// 短路求值寫法</span></span><br><span class="line">  res = (age &gt;= <span class="number">18</span>) &amp;&amp; <span class="string">&#x27;已成年&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 三元運算子寫法</span></span><br><span class="line">  res = age &gt;= <span class="number">18</span> ? <span class="string">&#x27;已成年&#x27;</span> : <span class="string">&#x27;未成年&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">isAdult</span>(<span class="literal">null</span>);  <span class="comment">// 資料錯誤</span></span><br><span class="line"><span class="title function_">isAdult</span>(<span class="number">18</span>); <span class="comment">// 已成年</span></span><br><span class="line"><span class="title function_">isAdult</span>(<span class="number">17</span>);  <span class="comment">// 未成年</span></span><br></pre></td></tr></table></figure>

<h3 id="詬病「不夠嚴謹」"><a href="#詬病「不夠嚴謹」" class="headerlink" title="詬病「不夠嚴謹」"></a>詬病「不夠嚴謹」</h3><div class="note default">
            <p>👨‍💻 當變數為 <code>false</code>、<code>0</code> 或空字串 <code>&quot;&quot;</code> 其中之一時， 則布林值也會轉型為<code>假值 (falsy)</code>，對於判斷變數是否使用過來說是相當不方便的一件事。</p>
          </div>

<figure class="highlight js"><figcaption><span>e.g. 判斷某個變數是否使用過，有的話就作初始化。</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> time = <span class="number">1</span> - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判斷變數是否使用過，有的話將其初始化</span></span><br><span class="line"><span class="keyword">if</span> (time) &#123;</span><br><span class="line">  <span class="comment">// 初始化失敗</span></span><br><span class="line">  time = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化失敗</span></span><br><span class="line">time = time &amp;&amp; <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><figcaption><span>e.g. 假設有一間銀行，發給新辦用戶 100 摳，結果連舊客戶都發了...</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kent&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">wallet</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;clark&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">wallet</span>: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person1.<span class="property">wallet</span> || &#123;person1, ...&#123;<span class="attr">wallet</span>: <span class="number">100</span>&#125;&#125;; <span class="comment">// &#123;person1: &#123;…&#125;, wallet: 100&#125;</span></span><br><span class="line">person2.<span class="property">wallet</span> || &#123;person2, ...&#123;<span class="attr">wallet</span>: <span class="number">100</span>&#125;&#125;; <span class="comment">// &#123;person2: &#123;…&#125;, wallet: 100&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 發現活動還沒開跑，已經發了幾百萬出去</span></span><br></pre></td></tr></table></figure>

<p><img src="https://imgur.com/yNnVS12.jpg" alt="部署後的工程師"></p>
<div class="note default">
            <p>javascript 後來增加了一種 <a href="https://kentdoit.github.io/javascript/3525467973/"><code>空值合併運算子</code></a> 用來解決不夠嚴謹的問題。</p>
          </div>

<h2 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h2><p><img src="https://imgur.com/w9OtDHw.png" alt="||、&amp;&amp; 使用口訣"></p>
<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul>
<li><a href="https://bolaslien.github.io/blog/2021/06/18/js-short-circuit-evaluation/">用邏輯判斷 ||(OR) 及 &amp;&amp;(AND) 來改寫 if (短路求值 Short-circuit evaluation)</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>運算子</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 空值合併運算子 Nullish coalescing operator</title>
    <url>/javascript/3525467973/</url>
    <content><![CDATA[<div class="note default">
            <p>建議先閱讀前一篇「<a href="https://kentdoit.github.io/javascript/350805089/">JS 短路求值 Short-circuit evaluation</a>」後再接下去閱讀。</p>
          </div>

<div class="note primary">
            <p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator">MDN</a>：<code>??</code> 左邊是 <code>null</code> 或 <code>undefined</code> 則不會執行右邊。</p>
          </div>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator#syntax">MDN 語法</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">leftExpr ?? rightExpr</span><br></pre></td></tr></table></figure>

<p>e.g. 判斷是否使用過</p>
<div class="note default">
            <p>情境：假設有一間銀行，發給新辦用戶 100 摳</p>
          </div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kent&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">wallet</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;clark&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">wallet</span>: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person1.<span class="property">wallet</span> ?? &#123;personOld, ...&#123;<span class="attr">wallet</span>: <span class="number">100</span>&#125;&#125;; <span class="comment">// &#123;person1: &#123;…&#125;, wallet: 0&#125;</span></span><br><span class="line">person2.<span class="property">wallet</span> ?? &#123;personNew, ...&#123;<span class="attr">wallet</span>: <span class="number">100</span>&#125;&#125;; <span class="comment">// &#123;person2: &#123;…&#125;, wallet: 100&#125;</span></span><br></pre></td></tr></table></figure>

<p>e.g. 預設值</p>
<ul>
<li>再賦予值的過程透過 <code>??</code> 來設置預設值，只要 <code>?? 左邊</code> 為 null、undefined 則就會賦予 <code>?? 右邊</code> 為新值。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> n;</span><br><span class="line"><span class="keyword">let</span> num = n ?? <span class="string">&#x27;0&#x27;</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用 tips</p>
</blockquote>
<div class="note danger">
            <p>不能與 &amp;&amp;、|| 一起使用。（不然會噴 SyntaxError）</p>
          </div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">null</span> || <span class="literal">undefined</span> ?? <span class="string">&quot;foo&quot;</span>; <span class="comment">// 噴 SyntaxError</span></span><br><span class="line">(<span class="literal">null</span> || <span class="literal">undefined</span> ) ?? <span class="string">&quot;foo&quot;</span>; <span class="comment">// 返回 &quot;foo&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h2><p><img src="https://imgur.com/2sYcGjJ.jpg"></p>
<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul>
<li><a href="https://cloud.tencent.com/developer/article/1954297">谈谈 JavaScript 中的空值合并操作符 Nullish coalescing operator</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>運算子</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 樣板字面值 Template Literal、標籤樣板字面值 Tagged Template Literals</title>
    <url>/javascript/2204307334/</url>
    <content><![CDATA[<h2 id="樣板字面值-Template-Literal"><a href="#樣板字面值-Template-Literal" class="headerlink" title="樣板字面值 Template Literal"></a>樣板字面值 Template Literal</h2><div class="note primary">
            <p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Template_literals">MDN</a>：用來進行多行字串、字串串接以及字串插補（string interpolation），在<code>先前</code>的版本 ES2015 中被稱為「樣板字串（template strings）」。</p>
          </div>

<p>語法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">`string text $&#123;expression&#125; string text`</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>兩個反引號 &#96;&#96; 並加上 <code>${expression}</code> 來插入變數、表達式。</p>
          </div>

<figure class="highlight js"><figcaption><span>e.g. 樣板自面值</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;我&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;s&#125;</span>是誰，<span class="subst">$&#123;s&#125;</span>在哪裡`</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Tips</p>
</blockquote>
<ul>
<li>反引號的內容會保留所有的 <code>換行</code> 和 <code>空白</code>。</li>
<li>不能插入陳述式，否則會噴 Error。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我是誰  ，\n  我在哪裡`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`這是陳述式範例：變數宣告<span class="subst">$&#123; <span class="keyword">let</span> str&#125;</span>`</span>); <span class="comment">// SyntaxError: Missing &#125; in template expression</span></span><br></pre></td></tr></table></figure>

<hr>
<div class="note default">
            <p>Q：那為什麼會需要樣板字面值？其它方式不行嗎？<br>A：可以，但樣板字面值簡化<code>串接過程</code>，使串接變得更<code>容易簡潔</code>。</p>
          </div>

<div class="note info">
            <p>舊字串串接：會使用<code>單引號</code>或<code>雙引號</code> 來<code>包裹字串</code>，再透過 <code>+</code> 的方式來串接，而樣板字面值<br>樣板字面值：兩個反引號 &#96;&#96; 並加上 <code>${expression}</code> 來插入變數、表達式。</p>
          </div>

<div class="note default">
            <p>下面會透過幾個範例，來演示舊字串串接、樣板字面值兩者在不同情境的差別。</p>
          </div>

<h3 id="語法差異"><a href="#語法差異" class="headerlink" title="語法差異"></a>語法差異</h3><figure class="highlight js"><figcaption><span>e.g. 和之前寫法差異</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;世界&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">&#x27;和平&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 舊字串串接</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1 + str2 + <span class="string">&#x27; &amp; 愛&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 樣板字面值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;str1&#125;</span><span class="subst">$&#123;str2&#125;</span> &amp; 愛`</span>);</span><br></pre></td></tr></table></figure>

<h3 id="多行串接"><a href="#多行串接" class="headerlink" title="多行串接"></a>多行串接</h3><figure class="highlight js"><figcaption><span>e.g. 多行串接</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> money = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 舊字串串接（需要使用到反斜線來換行）</span></span><br><span class="line"><span class="keyword">let</span> template = <span class="string">&#x27;&lt;ul&gt;\</span></span><br><span class="line"><span class="string">  &lt;li&gt;&#x27;</span> + money + <span class="string">&#x27;元 &lt;/li&gt;\</span></span><br><span class="line"><span class="string">  &lt;li&gt;&#x27;</span> + money + <span class="string">&#x27;元 &lt;/li&gt;\</span></span><br><span class="line"><span class="string">&lt;/ul&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 樣板字面值（會保留所有換行和空白）</span></span><br><span class="line"><span class="keyword">let</span> template = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;ul&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt; <span class="subst">$&#123;money&#125;</span>元 &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt; <span class="subst">$&#123;money&#125;</span>元 &lt;/li&gt;</span></span><br><span class="line"><span class="string">  &lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure>

<h3 id="跳脫字元"><a href="#跳脫字元" class="headerlink" title="跳脫字元"></a>跳脫字元</h3><div class="note default">
            <p>Q：那如果需要將反引號作為字串怎麼辦？<br>A：可以使用跳脫字元。</p>
          </div>

<figure class="highlight js"><figcaption><span>e.g. 跳脫字元</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在字元前面加上反斜線（backslash）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我厶\`誰`</span>); <span class="comment">// 我厶`誰</span></span><br></pre></td></tr></table></figure>

<h3 id="複雜用法"><a href="#複雜用法" class="headerlink" title="複雜用法"></a>複雜用法</h3><div class="note default">
            <p>上面範例中已充分暸解如何使用樣板字面值，來做字串串接和字串插補，下方在用一個範例來演示，結合函式、判斷式、巢狀的應用。</p>
          </div>

<figure class="highlight js"><figcaption><span>e.g. 函式 + 判斷式 + 巢狀</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> moneys = [<span class="number">10</span>, <span class="number">0</span>];</span><br><span class="line"><span class="keyword">let</span> template = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;moneys.map((money) =&gt; &#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">    <span class="keyword">if</span> (money) &#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">        <span class="keyword">return</span> <span class="string">`&lt;li&gt; <span class="subst">$&#123;money&#125;</span>元 &lt;/li&gt;`</span>;</span></span></span><br><span class="line"><span class="subst"><span class="string">      &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">        <span class="keyword">return</span> <span class="string">`&lt;li&gt; 沒錢 &lt;/li&gt;`</span>;</span></span></span><br><span class="line"><span class="subst"><span class="string">      &#125;</span></span></span><br><span class="line"><span class="subst"><span class="string">    &#125;).join(<span class="string">&#x27;&#x27;</span>)</span></span></span><br><span class="line"><span class="subst"><span class="string">  &#125;</span></span></span><br><span class="line"><span class="string">&lt;/ul&gt;`</span>;</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>不敢想像用傳統串接寫的話會變成什麼樣子 QQ</p>
          </div>

<hr>
<h2 id="標籤樣板字面值-Tagged-Template-Literals"><a href="#標籤樣板字面值-Tagged-Template-Literals" class="headerlink" title="標籤樣板字面值 Tagged Template Literals"></a>標籤樣板字面值 Tagged Template Literals</h2><div class="note primary">
            <p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Template_literals#%E6%A8%99%E7%B1%A4%E6%A8%A3%E6%9D%BF%E5%AD%97%E9%9D%A2%E5%80%BC">MDN</a>：屬於樣板字面值的進階用法，常用於函式參數傳入。</p>
          </div>

<p>語法：</p>
<ul>
<li>函式後方將括號替代為樣板字面值</li>
</ul>
<figure class="highlight js"><figcaption><span>e.g. 簡化了一般函式呼叫的括號</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一般函式參數</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;標籤樣板字面值&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 標籤樣板字面值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="property">log</span><span class="string">`標籤樣板字面值`</span>;</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>如果樣板字面值中沒有使用到 <code>${}</code>，那和一般函式呼叫帶入的參數沒什麼差異，那看起來也沒多厲害？不不不精彩的正要開始。</p>
          </div>

<h3 id="樣板字面值傳參數特性"><a href="#樣板字面值傳參數特性" class="headerlink" title="樣板字面值傳參數特性"></a>樣板字面值傳參數特性</h3><ul>
<li>將樣板字面值內容中含有 <code>$&#123;&#125;</code> 切為 <code>多個參數</code>，將其組成一個陣列傳入函式中。</li>
</ul>
<p>參數格式</p>
<ul>
<li>第一個參數（陣列）：除了 <code>$&#123;&#125;</code> 之外的內容。<ul>
<li>從 <code>$&#123;&#125;</code> 位置切割，並會以字串型態存入陣列中。</li>
<li>要注意就算 <code>$&#123;&#125;</code> 後面沒有其他字串，但還是會有一個空字串存入陣列中</li>
</ul>
</li>
<li>第二個參數：第一個 <code>$&#123;&#125;</code></li>
<li>第三個參數：第二個 <code>$&#123;&#125;</code>（…依此類推下去）</li>
</ul>
<p><img src="https://imgur.com/N24S0H1.jpg"></p>
<div class="note default">
            <p>${} 後面沒有其他字串，但還是會有一個空字串存入陣列中。<br>例如：一個 ${} 會切兩個字串，兩個 ${} 會切三個字串。</p>
          </div>

<figure class="highlight js"><figcaption><span>e.g. 標籤樣板字面值</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;標籤&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">&#x27;標籤樣板字面值&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">str, arg</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str);  <span class="comment">// str=[&#x27;演示&#x27;, &#x27;&#x27;, &#x27;範例&#x27;]</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);  <span class="comment">// arg=&#x27;標籤&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn<span class="string">`演示<span class="subst">$&#123;str1&#125;</span><span class="subst">$&#123;str2&#125;</span>範例`</span>;</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>變數的部分，也可以使用<code>其餘運算子</code>來一次接收全部變數。</p>
          </div>

<figure class="highlight js"><figcaption><span>e.g. 其餘運算子接收所有變數</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;標籤&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">&#x27;標籤樣板字面值&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">str, ...arg</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str);  <span class="comment">// str=[&#x27;演示&#x27;, &#x27;&#x27;, &#x27;範例&#x27;]</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);  <span class="comment">// arg=[&#x27;標籤&#x27;, &#x27;標籤樣板字面值&#x27;]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn<span class="string">`演示<span class="subst">$&#123;str1&#125;</span><span class="subst">$&#123;str2&#125;</span>範例`</span>;</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>通常 <code>${}</code> 數量是不固定的，因此可以使用其餘運算子將 <code>${}</code> 的參數組成陣列來使用。</p>
          </div>

<figure class="highlight js"><figcaption><span>e.g. 標籤樣板字面值 + 其餘運算子</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;標籤樣板字面值&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">&#x27;其餘運算子&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">str, ...args</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str, args); </span><br><span class="line">  <span class="comment">// str=[&#x27;演示&#x27;, &#x27;+&#x27;, &#x27;範例&#x27;], arg=[&#x27;標籤樣板字面值&#x27;, &#x27;其餘運算子&#x27;]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn<span class="string">`演示<span class="subst">$&#123;str1&#125;</span>+<span class="subst">$&#123;str2&#125;</span>範例`</span>;</span><br></pre></td></tr></table></figure>

<div class="note danger">
            <p>要注意第一個參數永遠只會傳入非 <code>${}</code> 的字串，所以請不要在第一個參數使用其餘參數，因為沒有必要。</p>
          </div>

<div class="note default">
            <p>標籤樣板字面值也常用來預防 XSS 攻擊，請看下方範例。</p>
          </div>

<ul>
<li>透過將 ${} 內容中含有<code>&lt;</code>、<code>&gt;</code> 與 <code>&amp;</code> 的符號替換成 ASCII Code，也就是單純的字串。</li>
</ul>
<figure class="highlight js"><figcaption><span>e.g. 預防 XSS 攻擊</span><a href="https://israynotarray.com/javascript/20211114/136128318/">src</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">convertHTML</span> (strings, ...keys) &#123;</span><br><span class="line">  <span class="keyword">return</span> strings.<span class="title function_">map</span>(<span class="function">(<span class="params">str, i</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;str&#125;</span><span class="subst">$&#123;keys[i] ? keys[i].replace(/&amp;/g, <span class="string">&#x27;&amp;amp;&#x27;</span>).replace(/&lt;/g, <span class="string">&#x27;&amp;lt;&#x27;</span>).replace(/&gt;/g, <span class="string">&#x27;&amp;gt;&#x27;</span>): <span class="string">&#x27;&#x27;</span>&#125;</span>`</span>).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">convertHTML<span class="string">`&lt;p&gt;超連結：<span class="subst">$&#123;Url&#125;</span>&lt;/p&gt;`</span>;</span><br></pre></td></tr></table></figure>

<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul>
<li><a href="https://medium.com/vicky-notes/es6-%E7%AB%A0%E7%AF%80-template-literial-7309b9e3bebb">ES6 章節：Template Literial</a></li>
<li>PJ 大 <a href="https://pjchender.blogspot.com/2017/01/javascript-es6-template-literalstagged.html">[筆記] JavaScript ES6 中的模版字符串（template literals）和標籤模版（tagged template）</a></li>
<li>Ray <a href="https://israynotarray.com/javascript/20211114/136128318/">JavaScript 核心觀念(72) - ES6 章節：Template Literial - 標籤樣板字面值</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
</search>
